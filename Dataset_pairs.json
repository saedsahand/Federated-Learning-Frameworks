[
    {
        "Exception": "ZeroDivisionError",
        "Pair_1": {
            "buggy": "def calculates_results_stats(results_dic):\n    \"\"\"\n    Calculates statistics of the results of the program run using classifier's model \n    architecture to classifying pet images. Then puts the results statistics in a \n    dictionary (results_stats_dic) so that it's returned for printing as to help\n    the user to determine the 'best' model for classifying images. Note that \n    the statistics calculated as the results are either percentages or counts.\n    Parameters:\n      results_dic - Dictionary with key as image filename and value as a List \n             (index)idx 0 = pet image label (string)\n                    idx 1 = classifier label (string)\n                    idx 2 = 1/0 (int)  where 1 = match between pet image and \n                            classifer labels and 0 = no match between labels\n                    idx 3 = 1/0 (int)  where 1 = pet image 'is-a' dog and \n                            0 = pet Image 'is-NOT-a' dog. \n                    idx 4 = 1/0 (int)  where 1 = Classifier classifies image \n                            'as-a' dog and 0 = Classifier classifies image  \n                            'as-NOT-a' dog.\n    Returns:\n     results_stats_dic - Dictionary that contains the results statistics (either\n                    a percentage or a count) where the key is the statistic's \n                     name (starting with 'pct' for percentage or 'n' for count)\n                     and the value is the statistic's value. See comments above\n                     and the previous topic Calculating Results in the class for details\n                     on how to calculate the counts and statistics.\n    \"\"\"        \n    # Replace None with the results_stats_dic dictionary that you created with \n    # this function \n    results_stats_dic = dict()\n    results_stats_dic['n_dogs_img'] = 0\n    results_stats_dic['n_match'] = 0\n    results_stats_dic['n_correct_dogs'] = 0\n    results_stats_dic['n_correct_notdogs'] = 0\n    results_stats_dic['n_correct_breed'] = 0 \n    \n    for key in results_dic:\n        if results_dic[key][2] == 1:\n            results_stats_dic['n_match'] += 1\n        if results_dic[key][3] == 1 and results_dic[2] == 1:\n            results_stats_dic['n_correct_breed'] += 1  \n        if results_dic[key][3] == 1: \n            results_stats_dic['n_dogs_img'] += 1    \n            if results_dic[key][4] == 1:\n                results_stats_dic['n_correct_dogs'] += 1    \n        \n        else:\n            if results_dic[key][4]==0 and results_dic[key][3]==0:\n                results_stats_dic['n_correct_notdogs']+=1\n                \n    results_stats_dic['n_images'] = len(results_dic) \n    results_stats_dic['n_notdogs_img'] = (results_stats_dic['n_images'] - \n                                      results_stats_dic['n_dogs_img'])\n    \n    results_stats_dic['pct_match'] = (results_stats_dic['n_match'] / results_stats_dic['n_images']) * 100.0\n    \n    if results_stats_dic['n_dogs_img'] > 0:\n        results_stats_dic['pct_correct_dogs'] = 100.0 * results_stats_dic['n_correct_dogs']/results_stats_dic['n_dogs_img'] \n    else:\n        results_stats_dic['pct_correct_dogs'] = 0.0\n    \n    if results_stats_dic['n_dogs_img'] > 0:\n        results_stats_dic['pct_correct_breed'] = (results_stats_dic['n_correct_breed'] / results_stats_dic['n_dogs_img']) * 100.0\n    \n    else:\n        results_stats_dic['pct_correct_breed'] = 0.0\n    \n    if results_stats_dic['n_notdogs_img'] > 0:\n        results_stats_dic['pct_correct_notdogs'] = (results_stats_dic['n_correct_notdogs'] /\n                                                results_stats_dic['n_notdogs_img'])*100.0\n    else:\n        results_stats_dic['pct_correct_notdogs'] = 0.0  \n  \n    \n    return results_stats_dic\ncalculates_results_stats({})",
            "fixed": "def calculates_results_stats(results_dic):\n    \"\"\"\n    Calculates statistics of the results of the program run using classifier's model \n    architecture to classify pet images. Then puts the results statistics in a \n    dictionary (results_stats_dic) so that it's returned for printing to help\n    the user determine the 'best' model for classifying images. Note that \n    the statistics calculated as the results are either percentages or counts.\n    \n    Parameters:\n      results_dic - Dictionary with key as image filename and value as a List \n             (index)idx 0 = pet image label (string)\n                    idx 1 = classifier label (string)\n                    idx 2 = 1/0 (int)  where 1 = match between pet image and \n                            classifier labels and 0 = no match between labels\n                    idx 3 = 1/0 (int)  where 1 = pet image 'is-a' dog and \n                            0 = pet Image 'is-NOT-a' dog. \n                    idx 4 = 1/0 (int)  where 1 = Classifier classifies image \n                            'as-a' dog and 0 = Classifier classifies image  \n                            'as-NOT-a' dog.\n    Returns:\n     results_stats_dic - Dictionary that contains the results statistics (either\n                    a percentage or a count) where the key is the statistic's \n                    name (starting with 'pct' for percentage or 'n' for count)\n                    and the value is the statistic's value.\n    \"\"\"\n    results_stats_dic = dict()\n    results_stats_dic['n_dogs_img'] = 0\n    results_stats_dic['n_match'] = 0\n    results_stats_dic['n_correct_dogs'] = 0\n    results_stats_dic['n_correct_notdogs'] = 0\n    results_stats_dic['n_correct_breed'] = 0\n    \n    for key in results_dic:\n        if results_dic[key][2] == 1:\n            results_stats_dic['n_match'] += 1\n        if results_dic[key][3] == 1:\n            if results_dic[key][2] == 1:\n                results_stats_dic['n_correct_breed'] += 1  \n            results_stats_dic['n_dogs_img'] += 1    \n            if results_dic[key][4] == 1:\n                results_stats_dic['n_correct_dogs'] += 1    \n        else:\n            if results_dic[key][4] == 0:\n                results_stats_dic['n_correct_notdogs'] += 1\n                \n    results_stats_dic['n_images'] = len(results_dic)\n    results_stats_dic['n_notdogs_img'] = results_stats_dic['n_images'] - results_stats_dic['n_dogs_img']\n    \n    if results_stats_dic['n_images'] > 0:\n        results_stats_dic['pct_match'] = (results_stats_dic['n_match'] / results_stats_dic['n_images']) * 100.0\n    else:\n        results_stats_dic['pct_match'] = 0.0\n    \n    if results_stats_dic['n_dogs_img'] > 0:\n        results_stats_dic['pct_correct_dogs'] = 100.0 * results_stats_dic['n_correct_dogs'] / results_stats_dic['n_dogs_img'] \n        results_stats_dic['pct_correct_breed'] = (results_stats_dic['n_correct_breed'] / results_stats_dic['n_dogs_img']) * 100.0\n    else:\n        results_stats_dic['pct_correct_dogs'] = 0.0\n        results_stats_dic['pct_correct_breed'] = 0.0\n    \n    if results_stats_dic['n_notdogs_img'] > 0:\n        results_stats_dic['pct_correct_notdogs'] = (results_stats_dic['n_correct_notdogs'] / results_stats_dic['n_notdogs_img']) * 100.0\n    else:\n        results_stats_dic['pct_correct_notdogs'] = 0.0\n    \n    return results_stats_dic\n\n# Example usage\nprint(calculates_results_stats({}))"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_4": {
            "buggy": "def average_of_unlimited_input(*numbers):\n    \"\"\"\n    Returns the average of all the numbers you pass into the function\n    \"\"\"\n    return sum(numbers) / len(numbers)\nprint(average_of_unlimited_input())",
            "fixed": "def average_of_unlimited_input(*numbers):\n    \"\"\"\n    Returns the average of all the numbers you pass into the function\n    \"\"\"\n    if not numbers:  # Check if numbers is empty\n        return 0  # Or return None or raise an exception as needed\n    return sum(numbers) / len(numbers)\n\nprint(average_of_unlimited_input())  # Output: 0"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_5": {
            "buggy": "import operator\nimport itertools\nfrom itertools import chain\n\ndef flatten(listOfLists):\n    \"Flatten one level of nesting\"\n    return chain.from_iterable(listOfLists)\n\noperators = [operator.add,operator.truediv,operator.sub,operator.mul]\n\n#All possible operators\nfunc_evals= [i for i in itertools.product(operators,repeat=3)] \n\n#All possible digits (not-permuted yet!)\nall_combo_digs=itertools.combinations(map(float,range(1,10)),4)\n\n#Evaluation function, handles div by 0, non-integer results and parens\ndef evaluate(vals,ops):\n    a,b,c,d=vals\n    op1,op2,op3=ops\n    vs=[]\n    #5 possible parens ordering\n    s=op3(op2(op1(a,b),c),d)\n    vs.append(s)\n    s=op2(op1(a,b),op3(c,d))\n    vs.append(s)\n    s=op3(op1(a,op2(b,c)),d)\n    vs.append(s)\n    s=op1(a,op3(op2(b,c),d))\n    vs.append(s)\n    s=op1(a,op2(b,op3(c,d)))\n    vs.append(s)\n    #Drop non-integer results!\n    return map(lambda x: int(x) if int(x)==x else -1,vs)\n\n#Loop over all digit combos, calculate permutations and count consecutive solutions\nconsec_run=0\ncr_digs=[]\ncr_results=[]\nfor digs in all_combo_digs:\n    dig_perms = [i for i in itertools.permutations(digs,4)]\n    results = set(flatten([flatten([evaluate(vals,ops) for ops in func_evals]) for vals in dig_perms]))    \n    #results = set(flatten([evaluate(digs,ops) for ops in func_evals]))\n    results = sorted([i for i in results if i>0])\n    #Get the larges consecutive run starting from the first element\n    c=1\n    for i in range(len(results)-1):\n        if results[i+1]-results[i]==1:\n            c+=1\n        else: \n            break\n    if c>consec_run:\n        consec_run=c\n        cr_digs=digs\n        cr_results=results\n\nprint(cr_results)\nprint(consec_run)\nprint( \"\".join(map(lambda x:str(int(x)),cr_digs)))",
            "fixed": "import operator\nimport itertools\nfrom itertools import chain\n\ndef flatten(listOfLists):\n    \"Flatten one level of nesting\"\n    return chain.from_iterable(listOfLists)\n\noperators = [operator.add, operator.truediv, operator.sub, operator.mul]\n\n# All possible operators\nfunc_evals = [i for i in itertools.product(operators, repeat=3)] \n\n# All possible digits (not-permuted yet!)\nall_combo_digs = itertools.combinations(map(float, range(1, 10)), 4)\n\n# Evaluation function, handles div by 0, non-integer results and parens\ndef evaluate(vals, ops):\n    a, b, c, d = vals\n    op1, op2, op3 = ops\n    vs = []\n    \n    # 5 possible parentheses ordering\n    try:\n        vs.append(op3(op2(op1(a, b), c), d))\n        vs.append(op2(op1(a, b), op3(c, d)))\n        vs.append(op3(op1(a, op2(b, c)), d))\n        vs.append(op1(a, op3(op2(b, c), d)))\n        vs.append(op1(a, op2(b, op3(c, d))))\n    except ZeroDivisionError:\n        pass  # Ignore division by zero errors\n\n    # Drop non-integer results and filter out negative results\n    return set(int(x) for x in vs if int(x) == x and x > 0)\n\n# Loop over all digit combos, calculate permutations and count consecutive solutions\nconsec_run = 0\ncr_digs = []\ncr_results = []\n\nfor digs in all_combo_digs:\n    dig_perms = set(itertools.permutations(digs))  # Use set to avoid duplicates\n    results = set(flatten([evaluate(vals, ops) for vals in dig_perms for ops in func_evals]))\n    \n    results = sorted(results)\n    \n    # Get the largest consecutive run starting from the first element\n    c = 1\n    for i in range(len(results) - 1):\n        if results[i + 1] - results[i] == 1:\n            c += 1\n        else: \n            break\n            \n    if c > consec_run:\n        consec_run = c\n        cr_digs = digs\n        cr_results = results\n\nprint(cr_results)\nprint(consec_run)\nprint(\"\".join(map(lambda x: str(int(x)), cr_digs)))"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_6": {
            "buggy": "def divide_numbers(a, b):\n    return a / b\nprint(divide_numbers(10, 0))",
            "fixed": "def divide_numbers(a, b):\n    if b == 0:\n        return 'Cannot divide by zero'\n    return a / b\n\nprint(divide_numbers(10, 0))  # Output: 'Cannot divide by zero'"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_7": {
            "buggy": "def calculate_average(values):\n    return sum(values) / len(values)\nprint(calculate_average([]))",
            "fixed": "def calculate_average(values):\n    if not values:\n        return 'No values to average'\n    return sum(values) / len(values)\n\nprint(calculate_average([]))  # Output: 'No values to average'"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_8": {
            "buggy": "def percentage(part, whole):\n    return (part / whole) * 100\nprint(percentage(50, 0))",
            "fixed": "def percentage(part, whole):\n    if whole == 0:\n        return 'Whole cannot be zero'\n    return (part / whole) * 100\n\nprint(percentage(50, 0))  # Output: 'Whole cannot be zero'"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_9": {
            "buggy": "def calculate_ratio(x, y):\n    return x / y\nprint(calculate_ratio(5, 0))",
            "fixed": "def calculate_ratio(x, y):\n    if y == 0:\n        return 'Cannot compute ratio'\n    return x / y\n\nprint(calculate_ratio(5, 0))  # Output: 'Cannot compute ratio'"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_10": {
            "buggy": "def find_inverse(x):\n    return 1 / x\nprint(find_inverse(0))",
            "fixed": "def find_inverse(x):\n    if x == 0:\n        return 'Inverse of zero is undefined'\n    return 1 / x\n\nprint(find_inverse(0))  # Output: 'Inverse of zero is undefined'"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_11": {
            "buggy": "def slope(y2, y1, x2, x1):\n    return (y2 - y1) / (x2 - x1)\nprint(slope(1, 2, 3, 3))",
            "fixed": "def slope(y2, y1, x2, x1):\n    if x2 == x1:\n        return 'Vertical line: slope is undefined'\n    return (y2 - y1) / (x2 - x1)\n\nprint(slope(1, 2, 3, 3))  # Output: 'Vertical line: slope is undefined'"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_12": {
            "buggy": "def time_per_item(total_time, item_count):\n    return total_time / item_count\nprint(time_per_item(100, 0))",
            "fixed": "def time_per_item(total_time, item_count):\n    if item_count == 0:\n        return 'Item count cannot be zero'\n    return total_time / item_count\n\nprint(time_per_item(100, 0))  # Output: 'Item count cannot be zero'"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_13": {
            "buggy": "def speed(distance, time):\n    return distance / time\nprint(speed(100, 0))",
            "fixed": "def speed(distance, time):\n    if time == 0:\n        return 'Time cannot be zero'\n    return distance / time\n\nprint(speed(100, 0))  # Output: 'Time cannot be zero'"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_14": {
            "buggy": "def average_age(ages):\n    return sum(ages) / len(ages)\nprint(average_age([]))",
            "fixed": "def average_age(ages):\n    if not ages:\n        return 'No ages to average'\n    return sum(ages) / len(ages)\n\nprint(average_age([]))  # Output: 'No ages to average'"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_15": {
            "buggy": "def division(a, b):\n    return a / b\nprint(division(1, 0))",
            "fixed": "def division(a, b):\n    if b == 0:\n        return 'Cannot divide by zero'\n    return a / b\n\nprint(division(1, 0))  # Output: 'Cannot divide by zero'"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_16": {
            "buggy": "def share_candies(candies, people):\n    return candies / people\nprint(share_candies(10, 0))",
            "fixed": "def share_candies(candies, people):\n    if people == 0:\n        return 'Cannot share with zero people'\n    return candies / people\n\nprint(share_candies(10, 0))  # Output: 'Cannot share with zero people'"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_17": {
            "buggy": "def calculate_density(mass, volume):\n    return mass / volume\nprint(calculate_density(10, 0))",
            "fixed": "def calculate_density(mass, volume):\n    if volume == 0:\n        return 'Volume cannot be zero'\n    return mass / volume\n\nprint(calculate_density(10, 0))  # Output: 'Volume cannot be zero'"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_18": {
            "buggy": "def compute_grade(score, total):\n    return (score / total) * 100\nprint(compute_grade(75, 0))",
            "fixed": "def compute_grade(score, total):\n    if total == 0:\n        return 'Total cannot be zero'\n    return (score / total) * 100\n\nprint(compute_grade(75, 0))  # Output: 'Total cannot be zero'"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_19": {
            "buggy": "def calculate_profit(revenue, cost):\n    return (revenue - cost) / cost\nprint(calculate_profit(100, 0))",
            "fixed": "def calculate_profit(revenue, cost):\n    if cost == 0:\n        return 'Cost cannot be zero'\n    return (revenue - cost) / cost\n\nprint(calculate_profit(100, 0))  # Output: 'Cost cannot be zero'"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_20": {
            "buggy": "def calculate_discount(price, discount):\n    return price / discount\nprint(calculate_discount(100, 0))",
            "fixed": "def calculate_discount(price, discount):\n    if discount == 0:\n        return 'Discount cannot be zero'\n    return price / discount\n\nprint(calculate_discount(100, 0))  # Output: 'Discount cannot be zero'"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_21": {
            "buggy": "def calculate_proportion(part, total):\n    return part / total\nprint(calculate_proportion(5, 0))",
            "fixed": "def calculate_proportion(part, total):\n    if total == 0:\n        return 'Total cannot be zero'\n    return part / total\n\nprint(calculate_proportion(5, 0))  # Output: 'Total cannot be zero'"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_6": {
            "buggy": "import math\nimport random\n\n# Generate a list of random floating-point numbers\nrandom_numbers = [random.uniform(-10, 10) for _ in range(5)]\n\n# Function that divides all numbers by their index\nresults = []\nfor i, num in enumerate(random_numbers):\n    results.append(num / i)\n\nprint(results)",
            "fixed": "import math\nimport random\n\n# Generate a list of random floating-point numbers\nrandom_numbers = [random.uniform(-10, 10) for _ in range(5)]\n\n# Function that divides all numbers by their index\nresults = []\nfor i, num in enumerate(random_numbers):\n    try:\n        if i == 0:  # Prevent division by zero\n            continue\n        results.append(num / i)\n    except ZeroDivisionError:\n        pass\n\nprint(results)"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_7": {
            "buggy": "import functools\nimport operator\n\n# Create a list of numbers\nnums = [4, 5, 0, 7]\n\n# Divide all numbers using reduce\nresult = functools.reduce(operator.truediv, nums)\n\nprint(result)",
            "fixed": "import functools\nimport operator\n\n# Create a list of numbers\nnums = [4, 5, 0, 7]\n\n# Divide all numbers using reduce\ntry:\n    result = functools.reduce(operator.truediv, nums)\nexcept ZeroDivisionError:\n    result = 'Division by zero encountered'\n\nprint(result)"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_9": {
            "buggy": "import math\n\n# Calculate the reciprocal of a number\nnum = 0\nresult = 1 / num\nprint(result)",
            "fixed": "import math\n\n# Calculate the reciprocal of a number\nnum = 0\ntry:\n    result = 1 / num\nexcept ZeroDivisionError:\n    result = 'Cannot divide by zero'\nprint(result)"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_10": {
            "buggy": "import statistics\n\n# List of numbers\ndata = [10, 20, 0, 30]\n\n# Harmonic mean calculation\nharmonic_mean = statistics.harmonic_mean(data)\nprint(harmonic_mean)",
            "fixed": "import statistics\n\n# List of numbers\ndata = [10, 20, 0, 30]\n\n# Harmonic mean calculation, handle zero division\ntry:\n    harmonic_mean = statistics.harmonic_mean(data)\nexcept ZeroDivisionError:\n    harmonic_mean = 'Cannot compute harmonic mean with zero values'\nprint(harmonic_mean)"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_11": {
            "buggy": "import numpy as np\n\n# Array of numbers\narr = np.array([1, 2, 0, 4])\n\n# Inverse of the array\ninverse = 1 / arr\nprint(inverse)",
            "fixed": "import numpy as np\n\n# Array of numbers\narr = np.array([1, 2, 0, 4])\n\n# Inverse of the array, handle zero division\nwith np.errstate(divide='ignore'):\n    inverse = np.where(arr != 0, 1 / arr, 0)\nprint(inverse)"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_12": {
            "buggy": "import random\n\n# Randomly choose two numbers and divide them\nnum1 = random.randint(0, 10)\nnum2 = random.randint(0, 10)\nresult = num1 / num2\nprint(result)",
            "fixed": "import random\n\n# Randomly choose two numbers and divide them\nnum1 = random.randint(0, 10)\nnum2 = random.randint(0, 10)\ntry:\n    result = num1 / num2\nexcept ZeroDivisionError:\n    result = 'Cannot divide by zero'\nprint(result)"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_13": {
            "buggy": "import fractions\n\n# Create a fraction with zero as denominator\nfrac = fractions.Fraction(1, 0)\nprint(frac)",
            "fixed": "import fractions\n\n# Create a fraction with zero as denominator, handle exception\ntry:\n    frac = fractions.Fraction(1, 0)\nexcept ZeroDivisionError:\n    frac = 'Invalid fraction with zero denominator'\nprint(frac)"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_14": {
            "buggy": "import decimal\n\n# Decimal division by zero\nnum1 = decimal.Decimal('10.5')\nnum2 = decimal.Decimal('0')\nresult = num1 / num2\nprint(result)",
            "fixed": "import decimal\n\n# Decimal division by zero, handle exception\nnum1 = decimal.Decimal('10.5')\nnum2 = decimal.Decimal('0')\ntry:\n    result = num1 / num2\nexcept decimal.DivisionByZero:\n    result = 'Division by zero in Decimal operation'\nprint(result)"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_15": {
            "buggy": "import itertools\n\n# Infinite counting sequence\ncounter = itertools.count()\n\n# Perform division\nresult = 1 / next(counter)\nprint(result)",
            "fixed": "import itertools\n\n# Infinite counting sequence\ncounter = itertools.count()\n\n# Perform division, handle zero division\ntry:\n    result = 1 / next(counter)\nexcept ZeroDivisionError:\n    result = 'Cannot divide by zero in infinite sequence'\nprint(result)"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_16": {
            "buggy": "import math\n\n# Calculate log of zero\nresult = math.log(1 / 0)\nprint(result)",
            "fixed": "import math\n\n# Calculate log of zero, handle exception\ntry:\n    result = math.log(1 / 0)\nexcept ZeroDivisionError:\n    result = 'Math error: division by zero'\nprint(result)"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_17": {
            "buggy": "import numpy as np\n\n# Divide by zero in array\narr = np.array([2, 4, 0, 6])\nresult = arr / 0\nprint(result)",
            "fixed": "import numpy as np\n\n# Divide by zero in array, suppress warning\nwith np.errstate(divide='ignore', invalid='ignore'):\n    result = np.divide(arr, 0)\nprint(result)"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_18": {
            "buggy": "import math\n\n# Perform zero division\nresult = math.atan2(0, 0)\nprint(result)",
            "fixed": "import math\n\n# Perform zero division, handle exception\ntry:\n    result = math.atan2(0, 0)\nexcept ZeroDivisionError:\n    result = 'Math error: division by zero'\nprint(result)"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_19": {
            "buggy": "import random\n\n# Random division by zero\nnum = random.choice([0, 10])\nresult = 100 / num\nprint(result)",
            "fixed": "import random\n\n# Random division by zero, handle exception\nnum = random.choice([0, 10])\ntry:\n    result = 100 / num\nexcept ZeroDivisionError:\n    result = 'Cannot divide by zero'\nprint(result)"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_20": {
            "buggy": "import math\n\n# Inverse tangent function\nx = 0\nresult = math.atan(1 / x)\nprint(result)",
            "fixed": "import math\n\n# Inverse tangent function, handle division by zero\nx = 0\ntry:\n    result = math.atan(1 / x)\nexcept ZeroDivisionError:\n    result = 'Cannot compute atan for division by zero'\nprint(result)"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_21": {
            "buggy": "import decimal\n\n# Division using Decimal\nnum1 = decimal.Decimal('5.0')\nnum2 = decimal.Decimal('0.0')\nresult = num1 / num2\nprint(result)",
            "fixed": "import decimal\n\n# Division using Decimal, handle exception\nnum1 = decimal.Decimal('5.0')\nnum2 = decimal.Decimal('0.0')\ntry:\n    result = num1 / num2\nexcept decimal.DivisionByZero:\n    result = 'Cannot divide by zero with Decimal'\nprint(result)"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_22": {
            "buggy": "import math\n\n# Reciprocal square root\nnum = 0\nresult = 1 / math.sqrt(num)\nprint(result)",
            "fixed": "import math\n\n# Reciprocal square root, handle zero division\nnum = 0\ntry:\n    result = 1 / math.sqrt(num)\nexcept ZeroDivisionError:\n    result = 'Math error: division by zero'\nprint(result)"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_23": {
            "buggy": "import numpy as np\n\n# Matrix division by zero\nmatrix = np.array([[2, 4], [0, 1]])\nresult = matrix / 0\nprint(result)",
            "fixed": "import numpy as np\n\n# Matrix division by zero, suppress warnings\nwith np.errstate(divide='ignore', invalid='ignore'):\n    result = np.divide(matrix, 0)\nprint(result)"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_24": {
            "buggy": "import sympy\n\n# Symbolic division\nx = sympy.Symbol('x')\nresult = 1 / x.subs(x, 0)\nprint(result)",
            "fixed": "import sympy\n\n# Symbolic division, handle exception\nx = sympy.Symbol('x')\ntry:\n    result = 1 / x.subs(x, 0)\nexcept ZeroDivisionError:\n    result = 'Cannot divide by zero in symbolic computation'\nprint(result)"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_25": {
            "buggy": "import math\n\n# Logarithmic function with zero\nresult = math.log(1 / 0)\nprint(result)",
            "fixed": "import math\n\n# Logarithmic function with zero, handle exception\ntry:\n    result = math.log(1 / 0)\nexcept ZeroDivisionError:\n    result = 'Math error: division by zero'\nprint(result)"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_26": {
            "buggy": "import numpy as np\n\n# Divide array by scalar zero\narr = np.array([10, 20, 30])\nresult = arr / 0\nprint(result)",
            "fixed": "import numpy as np\n\n# Divide array by scalar zero, suppress warnings\nwith np.errstate(divide='ignore', invalid='ignore'):\n    result = np.divide(arr, 0)\nprint(result)"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_27": {
            "buggy": "import fractions\n\n# Fraction division\nfrac1 = fractions.Fraction(1, 2)\nfrac2 = fractions.Fraction(0, 1)\nresult = frac1 / frac2\nprint(result)",
            "fixed": "import fractions\n\n# Fraction division, handle zero division\nfrac1 = fractions.Fraction(1, 2)\nfrac2 = fractions.Fraction(0, 1)\ntry:\n    result = frac1 / frac2\nexcept ZeroDivisionError:\n    result = 'Cannot divide by zero in fraction'\nprint(result)"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_28": {
            "buggy": "import random\n\n# Random float division\nnum = random.uniform(0, 10)\nresult = 100 / num\nprint(result)",
            "fixed": "import random\n\n# Random float division, handle zero division\nnum = random.uniform(0, 10)\ntry:\n    result = 100 / num\nexcept ZeroDivisionError:\n    result = 'Cannot divide by zero'\nprint(result)"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_29": {
            "buggy": "import math\n\n# Division by zero in trigonometric function\nresult = math.sin(1 / 0)\nprint(result)",
            "fixed": "import math\n\n# Division by zero in trigonometric function, handle exception\ntry:\n    result = math.sin(1 / 0)\nexcept ZeroDivisionError:\n    result = 'Cannot divide by zero in trigonometric function'\nprint(result)"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_30": {
            "buggy": "import itertools\n\n# Infinite counting sequence\ncounter = itertools.count(start=0)\n\n# Division by zero\nresult = 1 / next(counter)\nprint(result)",
            "fixed": "import itertools\n\n# Infinite counting sequence, handle zero division\ncounter = itertools.count(start=0)\ntry:\n    result = 1 / next(counter)\nexcept ZeroDivisionError:\n    result = 'Cannot divide by zero in sequence'\nprint(result)"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_31": {
            "buggy": "import random\n\n# Randomly choose two numbers and divide\nnum1 = random.randint(0, 10)\nnum2 = random.randint(0, 10)\nresult = num1 / num2\nprint(result)",
            "fixed": "import random\n\n# Randomly choose two numbers and divide, handle zero division\nnum1 = random.randint(0, 10)\nnum2 = random.randint(0, 10)\ntry:\n    result = num1 / num2\nexcept ZeroDivisionError:\n    result = 'Cannot divide by zero'\nprint(result)"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_32": {
            "buggy": "import decimal\n\n# Decimal division by zero\nnum1 = decimal.Decimal('10')\nnum2 = decimal.Decimal('0')\nresult = num1 / num2\nprint(result)",
            "fixed": "import decimal\n\n# Decimal division by zero, handle exception\nnum1 = decimal.Decimal('10')\nnum2 = decimal.Decimal('0')\ntry:\n    result = num1 / num2\nexcept decimal.DivisionByZero:\n    result = 'Cannot divide by zero in Decimal'\nprint(result)"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_33": {
            "buggy": "import math\n\n# Calculate inverse cosine of division by zero\nresult = math.acos(1 / 0)\nprint(result)",
            "fixed": "import math\n\n# Calculate inverse cosine of division by zero, handle exception\ntry:\n    result = math.acos(1 / 0)\nexcept ZeroDivisionError:\n    result = 'Cannot compute acos for division by zero'\nprint(result)"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_34": {
            "buggy": "import fractions\n\n# Fraction division by zero\nfrac1 = fractions.Fraction(3, 4)\nfrac2 = fractions.Fraction(0, 1)\nresult = frac1 / frac2\nprint(result)",
            "fixed": "import fractions\n\n# Fraction division by zero, handle exception\nfrac1 = fractions.Fraction(3, 4)\nfrac2 = fractions.Fraction(0, 1)\ntry:\n    result = frac1 / frac2\nexcept ZeroDivisionError:\n    result = 'Cannot divide by zero in fraction'\nprint(result)"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_35": {
            "buggy": "import numpy as np\n\n# Divide matrix by zero\nmatrix = np.array([[1, 2], [3, 0]])\nresult = matrix / 0\nprint(result)",
            "fixed": "import numpy as np\n\n# Divide matrix by zero, handle exception\nwith np.errstate(divide='ignore', invalid='ignore'):\n    result = np.divide(matrix, 0)\nprint(result)"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_36": {
            "buggy": "import decimal\n\n# Decimal division by zero\nnum1 = decimal.Decimal('5')\nnum2 = decimal.Decimal('0')\nresult = num1 / num2\nprint(result)",
            "fixed": "import decimal\n\n# Decimal division by zero, handle exception\nnum1 = decimal.Decimal('5')\nnum2 = decimal.Decimal('0')\ntry:\n    result = num1 / num2\nexcept decimal.DivisionByZero:\n    result = 'Cannot divide by zero in Decimal'\nprint(result)"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_2": {
            "buggy": "inp = '''Stregth: 135\nSpeed: 88\nStamina: 50'''\ncount = 0\ntotal = 0\nfor line in inp:\n    if not line.strip().startswith(\"X-DSPAM-Confidence:\") : continue\n    pos = line.find(':')\n    num = float(line[pos+1:]) \n    total = float(total + num)\n    count = float(count + 1)\nprint('Average spam confidence:', float(total/count))",
            "fixed": "inp = '''Strength: 135\nSpeed: 88\nStamina: 50'''\ncount = 0\ntotal = 0\nfor line in inp.splitlines():\n    if not line.strip():\n        continue\n    pos = line.find(':')\n    num = float(line[pos + 1:].strip())\n    total += num\n    count += 1\n\nif count > 0:\n    print('Average value:', total / count)\nelse:\n    print('No valid entries to calculate the average.')"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_3": {
            "buggy": "def contour_centre_of_mass(contour=[]):\n    cx = 0\n    cy = 0\n    for p in contour:\n        cx += p[0][0]\n        cy += p[0][1]\n    cx = int(cx/len(contour))\n    cy = int(cy/len(contour))\n    return (cx, cy)\ncontour_centre_of_mass()",
            "fixed": "def contour_centre_of_mass(contour=[]):\n    if not contour:  # Check if the contour is empty\n        return (0, 0)\n    \n    cx = 0\n    cy = 0\n    for p in contour:\n        cx += p[0][0]\n        cy += p[0][1]\n    \n    cx = int(cx / len(contour))\n    cy = int(cy / len(contour))\n    \n    return (cx, cy)\n\n# Example usage\nprint(contour_centre_of_mass([]))  # Should handle the empty case and return (0, 0)"
        }
    },
    {
        "Exception": "TypeError",
        "Pair_4": {
            "buggy": "def binary_reader(fname):\n    with open(fname, 'rb') as f:\n        lines = [x.strip() for x in f.readlines()]\n\n    for line in lines:\n        tmp = line.strip().lower()\n        if 'some-pattern' in tmp: continue\n        # ... code\n# Example usage\nbinary_reader('example.bin')",
            "fixed": "def binary_reader(fname):\n    with open(fname, 'rb') as f:\n        lines = [x.rstrip(b'\\n\\r') for x in f.readlines()]\n\n    for line in lines:\n        tmp = line.lower()\n        if b'some-pattern' in tmp:\n            continue\n        # ... code to process the line further\n# Example usage\nbinary_reader('example.bin')"
        }
    },
    {
        "Exception": "TypeError",
        "Pair_5": {
            "buggy": "def code_1():\n    x = {1:2, 3:4, 2:67}\n    y = {2:3, 4:12}\n    return dict(x.items() + y.items())\nprint(code_1())",
            "fixed": "def code_1():\n    x = {1: 2, 3: 4, 2: 67}\n    y = {2: 3, 4: 12}\n    z = x.copy()  # Make a copy of x to avoid modifying the original dictionary\n    z.update(y)   # Merge y into the copy of x\n    return z\n\nprint(code_1())"
        }
    },
    {
        "Exception": "TypeError",
        "Pair_6": {
            "buggy": "def code_2():\n    x = {1: 2, 3: 4, None:True}\n    y = {2: 3, 4: 12, None: \"jocw\"}\n    return dict(**x, **y)\nprint(code_2())",
            "fixed": "def code_2():\n    x = {1: 2, 3: 4, None: True}\n    y = {2: 3, 4: 12, None: \"jocw\"}\n    z = {k: v for d in (x, y) for k, v in d.items()}\n    return z\n\nprint(code_2())"
        }
    },
    {
        "Exception": "TypeError",
        "Pair_7": {
            "buggy": "def format_issue():\n    info = \"Name: %s\\nRelease year: %d\" % \"Chrome.exe\", 2014\n    print(info)\nformat_issue()",
            "fixed": "def format_issue():\n    info = \"Name: %s\\nRelease year: %d\" % (\"Chrome.exe\", 2014)\n    print(info)\n\nformat_issue()"
        }
    },
    {
        "Exception": "NameError",
        "Pair_8": {
            "buggy": "array = [[1, 2, 4],\n         [3, 14, 7]]\nfor arr in array:\n    print(ar)",
            "fixed": "array = [[1, 2, 4],\n         [3, 14, 7]]\nfor arr in array:\n    print(arr)"
        }
    },
    {
        "Exception": "NameError",
        "Pair_9": {
            "buggy": "load1 = -9\nload2 = 21\nload1+load2\nprint(load3)",
            "fixed": "load1 = -9\nload2 = 21\nload3 = load1 + load2\nprint(load3)"
        }
    },
    {
        "Exception": "NameError",
        "Pair_10": {
            "buggy": "class Solution:\n    def missingNumber(self, nums: list) -> int:\n        correct = [i for i in range(len(nums) + 1)]\n\n        while len(nums) > 0:\n            if nums[j] in correct:\n                correct.remove(nums[0])\n                nums.remove(nums[0])\n\n        return correct[0]\na = Solution()\nresult = a.missingNumber([1, 2, 3])",
            "fixed": "class Solution:\n    def missingNumber(self, nums: list) -> int:\n        correct = [i for i in range(len(nums) + 1)]\n        \n        while len(nums) > 0:\n            if nums[0] in correct:\n                correct.remove(nums[0])\n                nums.remove(nums[0])\n\n        return correct[0]\n\na = Solution()\nresult = a.missingNumber([1, 2, 3])\nprint(result)  # Expected output: 0 (since 0 is the missing number)"
        }
    },
    {
        "Exception": "ValueError",
        "Pair_11": {
            "buggy": "num = int('55063.0')\nprint((num - 2) / 3)",
            "fixed": "num = int(float('55063.0'))\nprint((num - 2) / 3)"
        }
    },
    {
        "Exception": "ValueError",
        "Pair_12": {
            "buggy": "hex_num = float(\"FF\")\nprint(f\"hex_num: {hex_num}\")",
            "fixed": "hex_num = int('FF', 16)\nprint(f\"hex_num: {float(hex_num)}\")"
        }
    },
    {
        "Exception": "ValueError",
        "Pair_13": {
            "buggy": "student_with_scores = list({\"Annabel\":50, \"Elias\":58, \"Anais\":60, \"Ten\":49})\nfinal = {}\nfor student_name, score in student_with_scores:\n    final[student_name] = round((5/3) * score, 2)\nprint(final)",
            "fixed": "student_with_scores = {\"Annabel\": 50, \"Elias\": 58, \"Anais\": 60, \"Ten\": 49}\nfinal = {}\nfor student_name, score in student_with_scores.items():\n    final[student_name] = round((5 / 3) * score, 2)\nprint(final)"
        }
    },
    {
        "Exception": "AttributeError",
        "Pair_14": {
            "buggy": "coords = [(1, 2), (23, 1), (9, 46), (22, 45)]\nfor coord in coords:\n    if coord[0] > 5 and coord[0] % 3 != 2:\n        coord.append(0)\n    else:\n        coord.append(1)",
            "fixed": "coords = [(1, 2), (23, 1), (9, 46), (22, 45)]\nmodified_coords = []\nfor coord in coords:\n    if coord[0] > 5 and coord[0] % 3 != 2:\n        modified_coords.append(coord + (0,))\n    else:\n        modified_coords.append(coord + (1,))"
        }
    },
    {
        "Exception": "AttributeError",
        "Pair_15": {
            "buggy": "book = {\n    \"eevee\" : [\"jolteon\", \"flareon\", \"vaporeon\"],\n    \"jolteon\" : [\"zapdos\"],\n    \"vaporeon\" : [\"articuno\"],\n    \"flareon\" : [\"moltres\"]\n}\nfor pokemon in book:\n    if pokemon != \"eevee\":\n        continue\n    beateable = book.get(\"eevee\")\n    for p in beateable:\n       if p in book:\n           print(pokemon.get(p), \"gets beaten by\", pokemon)",
            "fixed": "book = {\n    \"eevee\": [\"jolteon\", \"flareon\", \"vaporeon\"],\n    \"jolteon\": [\"zapdos\"],\n    \"vaporeon\": [\"articuno\"],\n    \"flareon\": [\"moltres\"]\n}\n\nfor pokemon in book:\n    if pokemon != \"eevee\":\n        continue\n    beateable = book.get(\"eevee\")\n    for p in beateable:\n        if p in book:\n            print(p, \"gets beaten by\", pokemon)"
        }
    },
    {
        "Exception": "IndexError",
        "Pair_16": {
            "buggy": "l = [64, 18, 22, 60, 77]\ntotal = 0\nfor i in range(6):\n    total = l[i]\nprint(total)",
            "fixed": "l = [64, 18, 22, 60, 77]\ntotal = 0\nfor i in range(len(l)):\n    total += l[i]\nprint(total)"
        }
    },
    {
        "Exception": "IndexError",
        "Pair_17": {
            "buggy": "def insertionSort(arr):\n    n = len(arr) # Get the length of the array\n\n    if n <= 1:\n        return # If the array has 0 or 1 element, it is already sorted, so return\n\n    for i in range(1, n): # Iterate over the array starting from the second element\n        key = arr[i] # Store the current element as the key to be inserted in the right position\n        j = i-1\n        while j >= 0 and key < arr[j+1]: # Move elements greater than key one position ahead\n            arr[j+2] = arr[j+1] # Shift elements to the right\n            j -= 1\n        arr[j+2] = key # Insert the key in the correct position\narray = [23, 54, 72, 1, 2, 4, 4]\ninsertionSort(array)\nprint(array)",
            "fixed": "def insertionSort(arr):\n    n = len(arr)  # Get the length of the array\n\n    if n <= 1:\n        return  # If the array has 0 or 1 element, it is already sorted, so return\n\n    for i in range(1, n):  # Iterate over the array starting from the second element\n        key = arr[i]  # Store the current element as the key to be inserted in the right position\n        j = i - 1\n        while j >= 0 and key < arr[j]:  # Move elements greater than key one position ahead\n            arr[j + 1] = arr[j]  # Shift elements to the right\n            j -= 1\n        arr[j + 1] = key  # Insert the key in the correct position\n\narray = [23, 54, 72, 1, 2, 4, 4]\ninsertionSort(array)\nprint(array)"
        }
    },
    {
        "Exception": "IndexError",
        "Pair_18": {
            "buggy": "def deal(num_cards:int, num_players:int, deck:list[str]):\n    \"\"\"\n    Given the parameters:\n    \\t`num_cards`: an integer representing the number of cards to be dealt to each player\n    \\t`num_players`: an integer representing the number of players\n    \\t`deck`: a list of strings representing the cards to be dealt to each player\n    Returns a list of lists containing strings representing the cards in each player's hand.\n    If the deck runs out of cards, some players will have empty or incomplete hands\n    \"\"\"\n    import random as r\n    hands = []\n    for player in range(num_players):\n        hands.append([])\n        for card in range(num_cards):\n            if len(deck) == 0:\n                continue\n            # pick a random card in the deck\n            random_card = deck[r.randint(0, len(deck))]\n            # and add it to the player's hand\n            hands[player].append(random_card)\n            # remove the card from the deck\n            deck.remove(random_card)\n    return hands\nprint(deal(3, 1, [\"5H\", \"4S\", \"QC\"]))\nprint(deal(2, 1, [\"2D\", \"KD\"]))",
            "fixed": "import random as r\n\ndef deal(num_cards: int, num_players: int, deck: list[str]):\n    \"\"\"\n    Given the parameters:\n    \\t`num_cards`: an integer representing the number of cards to be dealt to each player\n    \\t`num_players`: an integer representing the number of players\n    \\t`deck`: a list of strings representing the cards to be dealt to each player\n    Returns a list of lists containing strings representing the cards in each player's hand.\n    If the deck runs out of cards, some players will have empty or incomplete hands.\n    \"\"\"\n    hands = []\n    for player in range(num_players):\n        hands.append([])\n        for card in range(num_cards):\n            if len(deck) == 0:\n                break\n            # pick a random card in the deck\n            random_card = deck[r.randint(0, len(deck) - 1)]\n            # and add it to the player's hand\n            hands[player].append(random_card)\n            # remove the card from the deck\n            deck.remove(random_card)\n    return hands\n\nprint(deal(3, 1, [\"5H\", \"4S\", \"QC\"]))\nprint(deal(2, 1, [\"2D\", \"KD\"]))"
        }
    },
    {
        "Exception": "RecursionError",
        "Pair_19": {
            "buggy": "def f(n):\n    if n == 0 or n == 1:\n        return 1\n    return n * f(n)\nprint(f(2))",
            "fixed": "def f(n):\n    if n == 0 or n == 1:\n        return 1\n    return n * f(n - 1)\n\nprint(f(2))"
        }
    },
    {
        "Exception": "RecursionError",
        "Pair_20": {
            "buggy": "# Binary Search Tree using recursion\ndef search(arr,target,s,e):\n    middle = s + (e - s) // 2\n\n    if s > e:\n        return -1\n\n    if target == arr[middle]:\n        return middle\n\n    if target < arr[middle]:\n        return search(arr,target,s,middle-1)\n\n    return search(arr,target,s,middle+1)\n\n\nARR = [1,2,3,4,5,6,7,8,9,10]\nk = search(ARR,9,0,len(ARR) - 1)\nprint(k)",
            "fixed": "# Binary Search using recursion\ndef search(arr, target, s, e):\n    if s > e:\n        return -1\n\n    middle = s + (e - s) // 2\n\n    if target == arr[middle]:\n        return middle\n\n    if target < arr[middle]:\n        return search(arr, target, s, middle - 1)\n\n    return search(arr, target, middle + 1, e)\n\n\nARR = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nk = search(ARR, 9, 0, len(ARR) - 1)\nprint(k)"
        }
    },
    {
        "Exception": "Semantic Errors",
        "Pair_21": {
            "buggy": "class Solution:\n    def __init__(self):\n        self.__values = {'M':1000,\n                         'D':500,\n                         'C':100,\n                         'L':50,\n                         'X':10,\n                         'V':5,\n                         'I':1\n        }\n    def romanToInt(self, s: str) -> int:\n        if s == \"\":\n            return 0\n        elif len(s) == 1:\n            if s in self.__values:\n                return self.__values[s]\n        elif len(s) == 2:\n            # e.g IV --> 5 - 1\n            left = self.romanToInt(s[0])\n            right = self.romanToInt(s[1])\n\n            if s[0] == s[1]:\n                return 2 * self.romanToInt(s[0])\n            elif left > right:\n                # e.g CI ---> 100 + 1 = 101\n                return left + right\n            return right - left\n        elif len(s) == 3:\n            first = self.romanToInt(s[0])\n            last_two = self.romanToInt(s[1:3])\n            if s[0] == s[1]:\n                if s[1] == s[2]:\n                    return 3 * first\n                return first + last_two            \n            \n            first_two = self.romanToInt(s[0:2])\n\n            if last_two > first:\n                return first_two + self.romanToInt(s[2])\n            return first + last_two\n        else:\n            # third = self.romanToInt(s[2])\n            fourth = self.romanToInt(s[3])\n            first_two = self.romanToInt(s[0:2])\n            second_two = self.romanToInt(s[2:4])\n            second = self.romanToInt(s[1])\n            third = self.romanToInt(s[2])\n            if third >= fourth:\n                return self.romanToInt(s[:3]) + self.romanToInt(s[3:])\n            ##################### incomplete\n            return self.romanToInt(s[0]) + self.romanToInt(s[1:4]) + self.romanToInt(s[4:])\na = Solution()\nprint(f\"{\"MCMXCIV\"} = {a.romanToInt(\"MCMXCIV\")}\")",
            "fixed": "class Solution:\n    def __init__(self):\n        self.__values = {'M':1000,\n                         'D':500,\n                         'C':100,\n                         'L':50,\n                         'X':10,\n                         'V':5,\n                         'I':1\n        }\n\n    def romanToInt(self, s: str) -> int:\n        if s == \"\":\n            return 0\n        elif len(s) == 1:\n            if s in self.__values:\n                return self.__values[s]\n        elif len(s) == 2:\n            left = self.romanToInt(s[0])\n            right = self.romanToInt(s[1])\n            if left < right:\n                return right - left\n            return left + right\n        else:\n            first = self.romanToInt(s[0])\n            second = self.romanToInt(s[1])\n            if first < second:\n                return -first + self.romanToInt(s[1:])\n            return first + self.romanToInt(s[1:])\n\na = Solution()\nprint(f\"MCMXCIV = {a.romanToInt('MCMXCIV')}\")"
        }
    },
    {
        "Exception": "Semantic Errors",
        "Pair_22": {
            "buggy": "def avg():\n    import numpy as np\n\n    arr = np.array([[1, 2, 3, 4, 5], \n                    [6, 7, 8, 9, 10],\n                    [11, 12, 13, 14, 15]])\n    # gets average of the numbers in the second column\n    print(np.sum(arr[1, 0:]) / np.size(arr[1, 0:]))\navg()",
            "fixed": "def avg():\n    import numpy as np\n\n    arr = np.array([[1, 2, 3, 4, 5], \n                    [6, 7, 8, 9, 10],\n                    [11, 12, 13, 14, 15]])\n    # gets average of the numbers in the second column\n    print(np.sum(arr[:, 1]) / np.size(arr, 0))\n\navg()"
        }
    },
    {
        "Exception": "Semantic Errors",
        "Pair_23": {
            "buggy": "def get_total(*nums):\n    for num in nums:\n        total = 0\n        total += num\n    return total\nprint(get_total(11, 6, 43))",
            "fixed": "def get_total(*nums):\n    total = 0\n    for num in nums:\n        total += num\n    return total\n\nprint(get_total(11, 6, 43))"
        }
    },
    {
        "Exception": "Infinite Loops",
        "Pair_24": {
            "buggy": "def collatz_sequence(x):\n    seq = [x]\n    if x < 1:\n        return []\n    while x > 1:\n        if x % 2 == 0:\n            x = x // 2\n        else:\n            x *= 3 + 1 \n            seq.append(x)\n    return seq\nprint(collatz_sequence(1030242))",
            "fixed": "def collatz_sequence(x):\n    seq = [x]\n    if x < 1:\n        return []\n    while x > 1:\n        if x % 2 == 0:\n            x = x // 2\n        else:\n            x = x * 3 + 1\n        seq.append(x)\n    return seq\n\nprint(collatz_sequence(1030242))"
        }
    },
    {
        "Exception": "Infinite Loops",
        "Pair_25": {
            "buggy": "class TV():  # class\n    # parameterized constructor\n    def __init__(self, name, channel=0, volume=0):\n        self.channel = channel\n        self.volume = volume\n        self.name = name\n\n    # create method for turning the TV on\n    def turn_on(self):\n        print(self.name + \" is currently on\")\n\n    # create method for turning the TV off\n    def turn_off(self):\n        print(self.name + \" is currently off\")\n\n    # create method that sets a new channel for the TV object\n    def set_new_channel(self):\n        while True:\n            try:\n                self.channel = int(input(\"Set new channel for \" + self.name + \": \"))\n                break  # Exit the loop if user inputted a valid channel(int)\n            except ValueError:\n                print(\"You've submitted an invalid value! Try again.\")\n\n    # create method that returns the current channel of the TV object\n    def get_current_channel(self):\n        return self.channel\n\n    # create method that sets a new volume for the TV object\n    def set_new_volume(self):\n        while True:\n            try:\n                self.volume = int(input(\"Set new volume for \" + self.name + \": \"))\n                break  # Exit the loop if user inputted a valid volume(int)\n            except ValueError:\n                print(\"You've submitted an invalid value! Try again.\")\n\n    # create method that returns the current volume of the TV object\n    def get_current_volume(self):\n        return self.volume\n\n    # create method that increases the channel number of the TV object by 1\n    def channel_up(self):\n        self.channel = self.channel + 1\n\n    # create method that decreases the channel number of the TV object by 1\n    def channel_down(self):\n        self.channel = self.channel - 1\n\n    # create method that increases the volume of the TV object by 1\n    def volume_up(self):\n        self.volume = self.volume + 1\n\n    # create method that decreases the volume of the TV object by 1\n    def volume_down(self):\n        self.volume = self.volume - 1\n\ntv1 = TV(\"tv1\")  # creates an object\n\nvalid_inputs = (\"yes\", \"no\")\noff_or_on = \"this_is_a_wrong_input\"\nuser_channel = \"this_is_a_wrong_input\"\nuser_channel_up = \"this_is_a_wrong_input\"\nuser_channel_down = \"this_is_a_wrong_input\"\nuser_volume = \"this_is_a_wrong_input\"\nuser_volume_up = \"this_is_a_wrong_input\"\nuser_volume_down = \"this_is_a_wrong_input\"\nuser_get_channel = \"this_is_a_wrong_input\"\nuser_get_volume = \"this_is_a_wrong_input\"\nuser_turn_off = \"this_is_a_wrong_input\"\n\nwhile off_or_on not in valid_inputs:\n    off_or_on = input(\"Would you like to turn tv1 on (yes/no)? \")\n    if off_or_on == \"no\":\n        print(\"Thank you for running this program!!!\")\n        break\n    if off_or_on == \"yes\":\n        while True:\n            tv1.turn_on()\n            print(\"\")\n\n            while user_channel not in valid_inputs:\n                user_channel = input(\"Would you like to input a new channel (yes/no)? \")\n                if user_channel == \"yes\":\n                    tv1.set_new_channel()\n                    print(\"\")\n                    break\n                elif user_channel == \"no\":\n                    print(\"\")\n                    break\n                else:\n                    print(\"You've inputted an invalid value. Choose again\")\n\n            while user_channel_up not in valid_inputs:\n                user_channel_up = input(\"Would you like to increase channel by 1 (yes/no)? \")\n                if user_channel_up == \"yes\":\n                    tv1.channel_up()\n                    print(\"\")\n                    break\n                elif user_channel_up == \"no\":\n                    print(\"\")\n                    break\n                else:\n                    print(\"You've inputted an invalid value. Choose again\")\n\n            while user_channel_down not in valid_inputs:\n                user_channel_down = input(\"Would you like to decrease channel by 1 (yes/no)? \")\n                if user_channel_down == \"yes\":\n                    tv1.channel_down()\n                    print(\"\")\n                    break\n                elif user_channel_down == \"no\":\n                    print(\"\")\n                    break\n                else:\n                    print(\"You've inputted an invalid value. Choose again\")\n\n            while user_volume not in valid_inputs:\n                user_volume = input(\"Would you like to input a new volume (yes/no)? \")\n                if user_volume == \"yes\":\n                    tv1.set_new_volume()\n                    print(\"\")\n                    break\n                elif user_volume == \"no\":\n                    print(\"\")\n                    break\n                else:\n                    print(\"You've inputted an invalid value. Choose again\")\n\n            while user_volume_up not in valid_inputs:\n                user_volume_up = input(\"Would you like to increase volume by 1 (yes/no)? \")\n                if user_volume_up == \"yes\":\n                    tv1.volume_up()\n                    print(\"\")\n                    break\n                elif user_volume_up == \"no\":\n                    print(\"\")\n                    break\n                else:\n                    print(\"You've inputted an invalid value. Choose again\")\n\n            while user_volume_down not in valid_inputs:\n                user_volume_down = input(\"Would you like to decrease volume by 1 (yes/no)? \")\n                if user_volume_down == \"yes\":\n                    tv1.volume_down()\n                    print(\"\")\n                    break\n                elif user_volume_down == \"no\":\n                    print(\"\")\n                    break\n                else:\n                    print(\"You've inputted an invalid value. Choose again\")\n\n            while user_get_channel not in valid_inputs:\n                user_get_channel = input(\"Would you like to know the current channel (yes/no)? \")\n                if user_get_channel == \"yes\":\n                    current_channel = tv1.get_current_channel()\n                    print(\"The current channel is: \" + str(current_channel))\n                    print(\"\")\n                    break\n                elif user_get_channel == \"no\":\n                    print(\"\")\n                    break\n                else:\n                    print(\"You've inputted an invalid value. Choose again\")\n\n            while user_get_volume not in valid_inputs:\n                user_get_volume = input(\"Would you like to know the current volume (yes/no)? \")\n                if user_get_volume == \"yes\":\n                    current_volume = tv1.get_current_volume()\n                    print(\"The current channel is: \" + str(current_volume))\n                    print(\"\")\n                    break\n                elif user_get_volume == \"no\":\n                    print(\"\")\n                    break\n                else:\n                    print(\"You've inputted an invalid value. Choose again\")\n\n            while user_turn_off not in valid_inputs:\n                user_turn_off = input(\"Would you like to turn tv1 off (yes/no)? \")\n                if user_turn_off == \"yes\" or \"no\":\n                    break\n                else:\n                    print(\"You've inputted an invalid value. Choose again\")\n            if user_turn_off == \"no\":\n                continue\n            elif user_turn_off == \"yes\":\n                tv1.turn_off()\n                break\n    else:\n        print(\"You've inputted an invalid value. Choose again\")\n",
            "fixed": "class TV():  # class\n    # parameterized constructor\n    def __init__(self, name, channel=0, volume=0):\n        self.channel = channel\n        self.volume = volume\n        self.name = name\n\n    # create method for turning the TV on\n    def turn_on(self):\n        print(self.name + \" is currently on\")\n\n    # create method for turning the TV off\n    def turn_off(self):\n        print(self.name + \" is currently off\")\n\n    # create method that sets a new channel for the TV object\n    def set_new_channel(self):\n        while True:\n            try:\n                self.channel = int(input(\"Set new channel for \" + self.name + \": \"))\n                break  # Exit the loop if user inputted a valid channel(int)\n            except ValueError:\n                print(\"You've submitted an invalid value! Try again.\")\n\n    # create method that returns the current channel of the TV object\n    def get_current_channel(self):\n        return self.channel\n\n    # create method that sets a new volume for the TV object\n    def set_new_volume(self):\n        while True:\n            try:\n                self.volume = int(input(\"Set new volume for \" + self.name + \": \"))\n                break  # Exit the loop if user inputted a valid volume(int)\n            except ValueError:\n                print(\"You've submitted an invalid value! Try again.\")\n\n    # create method that returns the current volume of the TV object\n    def get_current_volume(self):\n        return self.volume\n\n    # create method that increases the channel number of the TV object by 1\n    def channel_up(self):\n        self.channel = self.channel + 1\n\n    # create method that decreases the channel number of the TV object by 1\n    def channel_down(self):\n        self.channel = self.channel - 1\n\n    # create method that increases the volume of the TV object by 1\n    def volume_up(self):\n        self.volume = self.volume + 1\n\n    # create method that decreases the volume of the TV object by 1\n    def volume_down(self):\n        self.volume = self.volume - 1\n\ntv1 = TV(\"tv1\")  # creates an object\n\nvalid_inputs = (\"yes\", \"no\")\n\nwhile True:\n    off_or_on = input(\"Would you like to turn tv1 on (yes/no)? \")\n    if off_or_on == \"no\":\n        print(\"Thank you for running this program!!!\")\n        break\n    elif off_or_on == \"yes\":\n        while True:\n            tv1.turn_on()\n            print(\"\")\n\n            user_channel = input(\"Would you like to input a new channel (yes/no)? \")\n            while user_channel not in valid_inputs:\n                print(\"You've inputted an invalid value. Choose again\")\n                user_channel = input(\"Would you like to input a new channel (yes/no)? \")\n            if user_channel == \"yes\":\n                tv1.set_new_channel()\n                print(\"\")\n\n            user_channel_up = input(\"Would you like to increase channel by 1 (yes/no)? \")\n            while user_channel_up not in valid_inputs:\n                print(\"You've inputted an invalid value. Choose again\")\n                user_channel_up = input(\"Would you like to increase channel by 1 (yes/no)? \")\n            if user_channel_up == \"yes\":\n                tv1.channel_up()\n                print(\"\")\n\n            user_channel_down = input(\"Would you like to decrease channel by 1 (yes/no)? \")\n            while user_channel_down not in valid_inputs:\n                print(\"You've inputted an invalid value. Choose again\")\n                user_channel_down = input(\"Would you like to decrease channel by 1 (yes/no)? \")\n            if user_channel_down == \"yes\":\n                tv1.channel_down()\n                print(\"\")\n\n            user_volume = input(\"Would you like to input a new volume (yes/no)? \")\n            while user_volume not in valid_inputs:\n                print(\"You've inputted an invalid value. Choose again\")\n                user_volume = input(\"Would you like to input a new volume (yes/no)? \")\n            if user_volume == \"yes\":\n                tv1.set_new_volume()\n                print(\"\")\n\n            user_volume_up = input(\"Would you like to increase volume by 1 (yes/no)? \")\n            while user_volume_up not in valid_inputs:\n                print(\"You've inputted an invalid value. Choose again\")\n                user_volume_up = input(\"Would you like to increase volume by 1 (yes/no)? \")\n            if user_volume_up == \"yes\":\n                tv1.volume_up()\n                print(\"\")\n\n            user_volume_down = input(\"Would you like to decrease volume by 1 (yes/no)? \")\n            while user_volume_down not in valid_inputs:\n                print(\"You've inputted an invalid value. Choose again\")\n                user_volume_down = input(\"Would you like to decrease volume by 1 (yes/no)? \")\n            if user_volume_down == \"yes\":\n                tv1.volume_down()\n                print(\"\")\n\n            user_get_channel = input(\"Would you like to know the current channel (yes/no)? \")\n            while user_get_channel not in valid_inputs:\n                print(\"You've inputted an invalid value. Choose again\")\n                user_get_channel = input(\"Would you like to know the current channel (yes/no)? \")\n            if user_get_channel == \"yes\":\n                current_channel = tv1.get_current_channel()\n                print(\"The current channel is: \" + str(current_channel))\n                print(\"\")\n\n            user_get_volume = input(\"Would you like to know the current volume (yes/no)? \")\n            while user_get_volume not in valid_inputs:\n                print(\"You've inputted an invalid value. Choose again\")\n                user_get_volume = input(\"Would you like to know the current volume (yes/no)? \")\n            if user_get_volume == \"yes\":\n                current_volume = tv1.get_current_volume()\n                print(\"The current volume is: \" + str(current_volume))\n                print(\"\")\n\n            user_turn_off = input(\"Would you like to turn tv1 off (yes/no)? \")\n            while user_turn_off not in valid_inputs:\n                print(\"You've inputted an invalid value. Choose again\")\n                user_turn_off = input(\"Would you like to turn tv1 off (yes/no)? \")\n            if user_turn_off == \"yes\":\n                tv1.turn_off()\n                break\n    else:\n        print(\"You've inputted an invalid value. Choose again\")\n"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_26": {
            "buggy": "inp = '''Distance: 120\nTime: 0\nTime: 60'''\ncount = 0\ntotal = 0\nfor line in inp:\n    if not line.strip().startswith(\"Distance:\") : continue\n    pos = line.find(':')\n    num = float(line[pos+1:]) \n    total = float(total + num)\n    count = float(count + 1)\nprint('Average Distance:', float(total/count))",
            "fixed": "inp = '''Distance: 120\nTime: 0\nTime: 60'''\ncount = 0\ntotal = 0\nfor line in inp.splitlines():\n    if not line.strip():\n        continue\n    pos = line.find(':')\n    num = float(line[pos + 1:].strip())\n    total += num\n    count += 1\n\nif count > 0:\n    print('Average Distance:', total / count)\nelse:\n    print('No valid entries to calculate the average.')"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_27": {
            "buggy": "inp = '''Calories: 200\nProtein: 50\nCalories: 0'''\ncount = 0\ntotal = 0\nfor line in inp:\n    if not line.strip().startswith(\"Calories:\") : continue\n    pos = line.find(':')\n    num = float(line[pos+1:]) \n    total = float(total + num)\n    count = float(count + 1)\nprint('Average Calories:', float(total/count))",
            "fixed": "inp = '''Calories: 200\nProtein: 50\nCalories: 0'''\ncount = 0\ntotal = 0\nfor line in inp.splitlines():\n    if not line.strip():\n        continue\n    pos = line.find(':')\n    num = float(line[pos + 1:].strip())\n    total += num\n    count += 1\n\nif count > 0:\n    print('Average Calories:', total / count)\nelse:\n    print('No valid entries to calculate the average.')"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_28": {
            "buggy": "inp = '''Height: 180\nWeight: 75\nHeight: 0'''\ncount = 0\ntotal = 0\nfor line in inp:\n    if not line.strip().startswith(\"Height:\") : continue\n    pos = line.find(':')\n    num = float(line[pos+1:]) \n    total = float(total + num)\n    count = float(count + 1)\nprint('Average Height:', float(total/count))",
            "fixed": "inp = '''Height: 180\nWeight: 75\nHeight: 0'''\ncount = 0\ntotal = 0\nfor line in inp.splitlines():\n    if not line.strip():\n        continue\n    pos = line.find(':')\n    num = float(line[pos + 1:].strip())\n    total += num\n    count += 1\n\nif count > 0:\n    print('Average Height:', total / count)\nelse:\n    print('No valid entries to calculate the average.')"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_29": {
            "buggy": "inp = '''Fuel: 30\nSpeed: 60\nFuel: 0'''\ncount = 0\ntotal = 0\nfor line in inp:\n    if not line.strip().startswith(\"Fuel:\") : continue\n    pos = line.find(':')\n    num = float(line[pos+1:]) \n    total = float(total + num)\n    count = float(count + 1)\nprint('Average Fuel:', float(total/count))",
            "fixed": "inp = '''Fuel: 30\nSpeed: 60\nFuel: 0'''\ncount = 0\ntotal = 0\nfor line in inp.splitlines():\n    if not line.strip():\n        continue\n    pos = line.find(':')\n    num = float(line[pos + 1:].strip())\n    total += num\n    count += 1\n\nif count > 0:\n    print('Average Fuel:', total / count)\nelse:\n    print('No valid entries to calculate the average.')"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_30": {
            "buggy": "inp = '''Temperature: 20\nHumidity: 70\nTemperature: 0'''\ncount = 0\ntotal = 0\nfor line in inp:\n    if not line.strip().startswith(\"Temperature:\") : continue\n    pos = line.find(':')\n    num = float(line[pos+1:]) \n    total = float(total + num)\n    count = float(count + 1)\nprint('Average Temperature:', float(total/count))",
            "fixed": "inp = '''Temperature: 20\nHumidity: 70\nTemperature: 0'''\ncount = 0\ntotal = 0\nfor line in inp.splitlines():\n    if not line.strip():\n        continue\n    pos = line.find(':')\n    num = float(line[pos + 1:].strip())\n    total += num\n    count += 1\n\nif count > 0:\n    print('Average Temperature:', total / count)\nelse:\n    print('No valid entries to calculate the average.')"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_31": {
            "buggy": "inp = '''Pressure: 101\nAltitude: 300\nPressure: 0'''\ncount = 0\ntotal = 0\nfor line in inp:\n    if not line.strip().startswith(\"Pressure:\") : continue\n    pos = line.find(':')\n    num = float(line[pos+1:]) \n    total = float(total + num)\n    count = float(count + 1)\nprint('Average Pressure:', float(total/count))",
            "fixed": "inp = '''Pressure: 101\nAltitude: 300\nPressure: 0'''\ncount = 0\ntotal = 0\nfor line in inp.splitlines():\n    if not line.strip():\n        continue\n    pos = line.find(':')\n    num = float(line[pos + 1:].strip())\n    total += num\n    count += 1\n\nif count > 0:\n    print('Average Pressure:', total / count)\nelse:\n    print('No valid entries to calculate the average.')"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_32": {
            "buggy": "inp = '''Duration: 120\nEffort: 0\nDuration: 60'''\ncount = 0\ntotal = 0\nfor line in inp:\n    if not line.strip().startswith(\"Duration:\") : continue\n    pos = line.find(':')\n    num = float(line[pos+1:]) \n    total = float(total + num)\n    count = float(count + 1)\nprint('Average Duration:', float(total/count))",
            "fixed": "inp = '''Duration: 120\nEffort: 0\nDuration: 60'''\ncount = 0\ntotal = 0\nfor line in inp.splitlines():\n    if not line.strip():\n        continue\n    pos = line.find(':')\n    num = float(line[pos + 1:].strip())\n    total += num\n    count += 1\n\nif count > 0:\n    print('Average Duration:', total / count)\nelse:\n    print('No valid entries to calculate the average.')"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_33": {
            "buggy": "inp = '''Weight: 70\nLift: 0\nWeight: 80'''\ncount = 0\ntotal = 0\nfor line in inp:\n    if not line.strip().startswith(\"Weight:\") : continue\n    pos = line.find(':')\n    num = float(line[pos+1:]) \n    total = float(total + num)\n    count = float(count + 1)\nprint('Average Weight:', float(total/count))",
            "fixed": "inp = '''Weight: 70\nLift: 0\nWeight: 80'''\ncount = 0\ntotal = 0\nfor line in inp.splitlines():\n    if not line.strip():\n        continue\n    pos = line.find(':')\n    num = float(line[pos + 1:].strip())\n    total += num\n    count += 1\n\nif count > 0:\n    print('Average Weight:', total / count)\nelse:\n    print('No valid entries to calculate the average.')"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_34": {
            "buggy": "inp = '''Volume: 3\nFlow: 0\nVolume: 0'''\ncount = 0\ntotal = 0\nfor line in inp:\n    if not line.strip().startswith(\"Volume:\") : continue\n    pos = line.find(':')\n    num = float(line[pos+1:]) \n    total = float(total + num)\n    count = float(count + 1)\nprint('Average Volume:', float(total/count))",
            "fixed": "inp = '''Volume: 3\nFlow: 0\nVolume: 0'''\ncount = 0\ntotal = 0\nfor line in inp.splitlines():\n    if not line.strip():\n        continue\n    pos = line.find(':')\n    num = float(line[pos + 1:].strip())\n    total += num\n    count += 1\n\nif count > 0:\n    print('Average Volume:', total / count)\nelse:\n    print('No valid entries to calculate the average.')"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_35": {
            "buggy": "inp = '''Energy: 100\nWork: 0\nEnergy: 0'''\ncount = 0\ntotal = 0\nfor line in inp:\n    if not line.strip().startswith(\"Energy:\") : continue\n    pos = line.find(':')\n    num = float(line[pos+1:]) \n    total = float(total + num)\n    count = float(count + 1)\nprint('Average Energy:', float(total/count))",
            "fixed": "inp = '''Energy: 100\nWork: 0\nEnergy: 0'''\ncount = 0\ntotal = 0\nfor line in inp.splitlines():\n    if not line.strip():\n        continue\n    pos = line.find(':')\n    num = float(line[pos + 1:].strip())\n    total += num\n    count += 1\n\nif count > 0:\n    print('Average Energy:', total / count)\nelse:\n    print('No valid entries to calculate the average.')"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_36": {
            "buggy": "def average_speed(speeds=[]):\n    total_speed = 0\n    for speed in speeds:\n        total_speed += speed\n    return total_speed / len(speeds)\naverage_speed()",
            "fixed": "def average_speed(speeds=[]):\n    if not speeds:  # Check if the speeds list is empty\n        return 0\n    \n    total_speed = 0\n    for speed in speeds:\n        total_speed += speed\n    \n    return total_speed / len(speeds)\n\n# Example usage\nprint(average_speed([]))  # Should handle the empty case and return 0"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_37": {
            "buggy": "def average_marks(marks=[]):\n    total_marks = 0\n    for mark in marks:\n        total_marks += mark\n    return total_marks / len(marks)\naverage_marks()",
            "fixed": "def average_marks(marks=[]):\n    if not marks:  # Check if the marks list is empty\n        return 0\n    \n    total_marks = 0\n    for mark in marks:\n        total_marks += mark\n    \n    return total_marks / len(marks)\n\n# Example usage\nprint(average_marks([]))  # Should handle the empty case and return 0"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_38": {
            "buggy": "def calculate_density(mass, volume):\n    return mass / volume\ncalculate_density(100, 0)",
            "fixed": "def calculate_density(mass, volume):\n    if volume == 0:  # Check if volume is zero\n        return float('inf')  # or some other value or error message\n    \n    return mass / volume\n\n# Example usage\nprint(calculate_density(100, 0))  # Should handle the zero volume case gracefully"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_39": {
            "buggy": "def paint_needed(area, coverage_per_litre):\n    return area / coverage_per_litre\npaint_needed(500, 0)",
            "fixed": "def paint_needed(area, coverage_per_litre):\n    if coverage_per_litre == 0:  # Check if coverage_per_litre is zero\n        return float('inf')  # or some other value or error message\n    \n    return area / coverage_per_litre\n\n# Example usage\nprint(paint_needed(500, 0))  # Should handle the zero coverage case gracefully"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_40": {
            "buggy": "def mean_temperature(temps=[]):\n    total = 0\n    for temp in temps:\n        total += temp\n    return total / len(temps)\nmean_temperature()",
            "fixed": "def mean_temperature(temps=[]):\n    if not temps:  # Check if the temps list is empty\n        return 0\n    \n    total = 0\n    for temp in temps:\n        total += temp\n    \n    return total / len(temps)\n\n# Example usage\nprint(mean_temperature([]))  # Should handle the empty case and return 0"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_41": {
            "buggy": "def get_average(grades=[]):\n    total = 0\n    for grade in grades:\n        total += grade\n    return total / len(grades)\nget_average()",
            "fixed": "def get_average(grades=[]):\n    if not grades:  # Check if the grades list is empty\n        return 0\n    \n    total = 0\n    for grade in grades:\n        total += grade\n    \n    return total / len(grades)\n\n# Example usage\nprint(get_average([]))  # Should handle the empty case and return 0"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_42": {
            "buggy": "def compute_ratio(x, y):\n    return x / y\ncompute_ratio(10, 0)",
            "fixed": "def compute_ratio(x, y):\n    if y == 0:  # Check if y is zero\n        return float('inf')  # or some other value or error message\n    \n    return x / y\n\n# Example usage\nprint(compute_ratio(10, 0))  # Should handle the zero denominator case gracefully"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_43": {
            "buggy": "def harmonic_mean(samples=[]):\n    total = 0\n    for sample in samples:\n        total += 1 / sample\n    return len(samples) / total\nharmonic_mean([0])",
            "fixed": "def harmonic_mean(samples=[]):\n    if not samples:  # Check if the samples list is empty\n        return 0\n    total = 0\n    for sample in samples:\n        if sample == 0:\n            return float('inf')  # or handle differently if zero is in samples\n        total += 1 / sample\n    return len(samples) / total\n\n# Example usage\nprint(harmonic_mean([0]))  # Should handle the zero in samples case gracefully"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_44": {
            "buggy": "def average_list(nums=[]):\n    return sum(nums) / len(nums)\naverage_list()",
            "fixed": "def average_list(nums=[]):\n    if not nums:  # Check if the nums list is empty\n        return 0\n    return sum(nums) / len(nums)\n\n# Example usage\nprint(average_list([]))  # Should handle the empty case and return 0"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_45": {
            "buggy": "def average_length(words=[]):\n    total_length = 0\n    for word in words:\n        total_length += len(word)\n    return total_length / len(words)\naverage_length()",
            "fixed": "def average_length(words=[]):\n    if not words:  # Check if the words list is empty\n        return 0\n    \n    total_length = 0\n    for word in words:\n        total_length += len(word)\n    \n    return total_length / len(words)\n\n# Example usage\nprint(average_length([]))  # Should handle the empty case and return 0"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_46": {
            "buggy": "def calculate_average_review_length(review_lengths):\n    \"\"\"\n    Calculates the average length of user reviews from the given lengths of the reviews.\n    \n    Parameters:\n      review_lengths - A list of integers representing the lengths of user reviews.\n\n    Returns:\n      float: The average length of the reviews.\n    \"\"\"\n    total_length = 0\n    for length in review_lengths:\n        total_length += length\n    return total_length / len(review_lengths)\ncalculate_average_review_length([])",
            "fixed": "def calculate_average_review_length(review_lengths):\n    \"\"\"\n    Calculates the average length of user reviews from the given lengths of the reviews.\n\n    Parameters:\n      review_lengths - A list of integers representing the lengths of user reviews.\n\n    Returns:\n      float: The average length of the reviews.\n    \"\"\"\n    if not review_lengths:  # Check if the review_lengths list is empty\n        return 0\n    total_length = 0\n    for length in review_lengths:\n        total_length += length\n    return total_length / len(review_lengths)\n\n# Example usage\nprint(calculate_average_review_length([]))  # Should handle the empty list case gracefully"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_47": {
            "buggy": "def calculate_average_inflation_rate(inflation_rates):\n    \"\"\"\n    Calculates the average inflation rate from the given list of rates.\n    \n    Parameters:\n      inflation_rates - A list of float values representing the annual inflation rates.\n\n    Returns:\n      float: The average inflation rate.\n    \"\"\"\n    total_rate = 0\n    for rate in inflation_rates:\n        total_rate += rate\n    return total_rate / len(inflation_rates)\ncalculate_average_inflation_rate([])",
            "fixed": "def calculate_average_inflation_rate(inflation_rates):\n    \"\"\"\n    Calculates the average inflation rate from the given list of rates.\n\n    Parameters:\n      inflation_rates - A list of float values representing the annual inflation rates.\n\n    Returns:\n      float: The average inflation rate.\n    \"\"\"\n    if not inflation_rates:  # Check if the inflation_rates list is empty\n        return 0\n    total_rate = 0\n    for rate in inflation_rates:\n        total_rate += rate\n    return total_rate / len(inflation_rates)\n\n# Example usage\nprint(calculate_average_inflation_rate([]))  # Should handle the empty list case gracefully"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_48": {
            "buggy": "def compute_average_load_time(load_times):\n    \"\"\"\n    Computes the average webpage load time from the given list of load times.\n    \n    Parameters:\n      load_times - A list of float values representing the load times in seconds.\n\n    Returns:\n      float: The average load time.\n    \"\"\"\n    total_time = 0\n    for time in load_times:\n        total_time += time\n    return total_time / len(load_times)\ncompute_average_load_time([])",
            "fixed": "def compute_average_load_time(load_times):\n    \"\"\"\n    Computes the average webpage load time from the given list of load times.\n\n    Parameters:\n      load_times - A list of float values representing the load times in seconds.\n\n    Returns:\n      float: The average load time.\n    \"\"\"\n    if not load_times:  # Check if the load_times list is empty\n        return 0\n    total_time = 0\n    for time in load_times:\n        total_time += time\n    return total_time / len(load_times)\n\n# Example usage\nprint(compute_average_load_time([]))  # Should handle the empty list case gracefully"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_49": {
            "buggy": "def average_rating(ratings):\n    \"\"\"\n    Computes the average rating from the list of ratings.\n    \n    Parameters:\n      ratings - A list of integer values representing the ratings (1-5).\n\n    Returns:\n      float: The average rating.\n    \"\"\"\n    total_rating = 0\n    for rating in ratings:\n        total_rating += rating\n    return total_rating / len(ratings)\naverage_rating([])",
            "fixed": "def average_rating(ratings):\n    \"\"\"\n    Computes the average rating from the list of ratings.\n\n    Parameters:\n      ratings - A list of integer values representing the ratings (1-5).\n\n    Returns:\n      float: The average rating.\n    \"\"\"\n    if not ratings:  # Check if the ratings list is empty\n        return 0\n    total_rating = 0\n    for rating in ratings:\n        total_rating += rating\n    return total_rating / len(ratings)\n\n# Example usage\nprint(average_rating([]))  # Should handle the empty list case gracefully"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_50": {
            "buggy": "def calculate_average_completion_time(completion_times):\n    \"\"\"\n    Calculates the average completion time for a task from a list of times.\n    \n    Parameters:\n      completion_times - A list of float values representing completion times in minutes.\n\n    Returns:\n      float: The average completion time.\n    \"\"\"\n    total_time = 0\n    for time in completion_times:\n        total_time += time\n    return total_time / len(completion_times)\ncalculate_average_completion_time([])",
            "fixed": "def calculate_average_completion_time(completion_times):\n    \"\"\"\n    Calculates the average completion time for a task from a list of times.\n\n    Parameters:\n      completion_times - A list of float values representing completion times in minutes.\n\n    Returns:\n      float: The average completion time.\n    \"\"\"\n    if not completion_times:  # Check if the completion_times list is empty\n        return 0\n    total_time = 0\n    for time in completion_times:\n        total_time += time\n    return total_time / len(completion_times)\n\n# Example usage\nprint(calculate_average_completion_time([]))  # Should handle the empty list case gracefully"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_51": {
            "buggy": "def compute_average_energy(energies):\n    \"\"\"\n    Computes the average energy value from a list of energy readings.\n    \n    Parameters:\n      energies - A list of float values representing energy readings in kWh.\n\n    Returns:\n      float: The average energy reading.\n    \"\"\"\n    total_energy = 0\n    for energy in energies:\n        total_energy += energy\n    return total_energy / len(energies)\ncompute_average_energy([])",
            "fixed": "def compute_average_energy(energies):\n    \"\"\"\n    Computes the average energy value from a list of energy readings.\n\n    Parameters:\n      energies - A list of float values representing energy readings in kWh.\n\n    Returns:\n      float: The average energy reading.\n    \"\"\"\n    if not energies:  # Check if the energies list is empty\n        return 0\n    total_energy = 0\n    for energy in energies:\n        total_energy += energy\n    return total_energy / len(energies)\n\n# Example usage\nprint(compute_average_energy([]))  # Should handle the empty list case gracefully"
        }
    },
    {
        "Exception": "ZeroDivisionError",
        "Pair_52": {
            "buggy": "def calculate_average_sales(sales):\n    \"\"\"\n    Calculates the average sales amount from a list of sales figures.\n    \n    Parameters:\n      sales - A list of float values representing sales amounts in dollars.\n\n    Returns:\n      float: The average sales amount.\n    \"\"\"\n    total_sales = 0\n    for sale in sales:\n        total_sales += sale\n    return total_sales / len(sales)\ncalculate_average_sales([])",
            "fixed": "def calculate_average_sales(sales):\n    \"\"\"\n    Calculates the average sales amount from a list of sales figures.\n\n    Parameters:\n      sales - A list of float values representing sales amounts in dollars.\n\n    Returns:\n      float: The average sales amount.\n    \"\"\"\n    if not sales:  # Check if the sales list is empty\n        return 0\n    total_sales = 0\n    for sale in sales:\n        total_sales += sale\n    return total_sales / len(sales)\n\n# Example usage\nprint(calculate_average_sales([]))  # Should handle the empty list case gracefully"
        }
    },
    {
        "Exception": "TypeError",
        "Pair_53": {
            "buggy": "def int_sum(list_of_ints):\n    return sum(list_of_ints)\n\n# Example usage\nprint(int_sum([1, 2, '3']))",
            "fixed": "def int_sum(list_of_ints):\n    return sum(int(i) for i in list_of_ints)\n\n# Example usage\nprint(int_sum([1, 2, '3']))  # Should handle mixed types by converting to integers"
        }
    },
    {
        "Exception": "TypeError",
        "Pair_54": {
            "buggy": "def concatenate_strings(iterable):\n    result = ''\n    for item in iterable:\n        result += item\n    return result\n\n# Example usage\nprint(concatenate_strings(['Hello', ' ', 'world!', 123]))",
            "fixed": "def concatenate_strings(iterable):\n    result = ''\n    for item in iterable:\n        result += str(item)\n    return result\n\n# Example usage\nprint(concatenate_strings(['Hello', ' ', 'world!', 123]))  # Should handle non-string items by converting to strings"
        }
    },
    {
        "Exception": "TypeError",
        "Pair_55": {
            "buggy": "def safe_divide(a, b):\n    return a / b\n\n# Example usage\nprint(safe_divide('10', 2))",
            "fixed": "def safe_divide(a, b):\n    try:\n        return float(a) / float(b)\n    except (TypeError, ValueError):\n        return 'Invalid input: both arguments must be numbers.'\n\n# Example usage\nprint(safe_divide('10', 2))  # Should handle string input by converting to float"
        }
    },
    {
        "Exception": "TypeError",
        "Pair_56": {
            "buggy": "def list_length(lst):\n    return len(lst)\n\n# Example usage\nprint(list_length(123))",
            "fixed": "def list_length(lst):\n    if not isinstance(lst, (list, tuple, str)):\n        return 'Invalid input: argument must be a list, tuple, or string.'\n    return len(lst)\n\n# Example usage\nprint(list_length(123))  # Should handle invalid input by checking type"
        }
    },
    {
        "Exception": "TypeError",
        "Pair_57": {
            "buggy": "def flatten_list(nested_list):\n    return [item for sublist in nested_list for item in sublist]\n\n# Example usage\nprint(flatten_list([[1, 2, 3], 'not a list']))",
            "fixed": "def flatten_list(nested_list):\n    try:\n        return [item for sublist in nested_list for item in sublist]\n    except TypeError:\n        return 'Invalid input: all elements of the nested list must be lists.'\n\n# Example usage\nprint(flatten_list([[1, 2, 3], 'not a list']))  # Should handle mixed-type elements by raising a TypeError"
        }
    },
    {
        "Exception": "TypeError",
        "Pair_58": {
            "buggy": "def join_words(words_list):\n    return ' '.join(words_list)\n\n# Example usage\nprint(join_words(['Hello', 'world', 2]))",
            "fixed": "def join_words(words_list):\n    try:\n        return ' '.join(str(word) for word in words_list)\n    except TypeError:\n        return 'Invalid input: all elements should be convertible to string.'\n\n# Example usage\nprint(join_words(['Hello', 'world', 2]))  # Should handle non-string elements by converting to string"
        }
    },
    {
        "Exception": "TypeError",
        "Pair_59": {
            "buggy": "def calculate_area(radius):\n    import math\n    return math.pi * radius ** 2\n\n# Example usage\nprint(calculate_area('10'))",
            "fixed": "def calculate_area(radius):\n    try:\n        return math.pi * float(radius) ** 2\n    except (TypeError, ValueError):\n        return 'Invalid input: radius must be a number.'\n\n# Example usage\nprint(calculate_area('10'))  # Should handle string input by converting to float"
        }
    },
    {
        "Exception": "TypeError",
        "Pair_60": {
            "buggy": "def sum_of_squares(numbers):\n    return sum(num**2 for num in numbers)\n\n# Example usage\nprint(sum_of_squares([1, 2, 3, 'four']))",
            "fixed": "def sum_of_squares(numbers):\n    try:\n        return sum(float(num)**2 for num in numbers)\n    except (TypeError, ValueError):\n        return 'Invalid input: all elements must be numbers.'\n\n# Example usage\nprint(sum_of_squares([1, 2, 3, 'four']))  # Should handle mixed-type elements by converting to float"
        }
    },
    {
        "Exception": "TypeError",
        "Pair_61": {
            "buggy": "def extract_even_elements(elements):\n    return [el for el in elements if el % 2 == 0]\n\n# Example usage\nprint(extract_even_elements([1, 2, 3, 'four']))",
            "fixed": "def extract_even_elements(elements):\n    try:\n        return [int(el) for el in elements if int(el) % 2 == 0]\n    except (TypeError, ValueError):\n        return 'Invalid input: all elements must be convertible to integers.'\n\n# Example usage\nprint(extract_even_elements([1, 2, 3, 'four']))  # Should handle mixed-type elements by converting to int"
        }
    },
    {
        "Exception": "TypeError",
        "Pair_62": {
            "buggy": "def multiply_elements(elements, factor):\n    return [el * factor for el in elements]\n\n# Example usage\nprint(multiply_elements([1, 2, 3], 'two'))",
            "fixed": "def multiply_elements(elements, factor):\n    try:\n        factor = float(factor)\n        return [el * factor for el in elements]\n    except (TypeError, ValueError):\n        return 'Invalid input: factor must be a number.'\n\n# Example usage\nprint(multiply_elements([1, 2, 3], 'two'))  # Should handle string factor by converting to float"
        }
    },
    {
        "Exception": "TypeError",
        "Pair_63": {
            "buggy": "def add_elements_to_set(a_set, elements):\n    for el in elements:\n        a_set.add(el)\n    return a_set\n\n# Example usage\nprint(add_elements_to_set({1, 2}, [3, 4, '5']))",
            "fixed": "def add_elements_to_set(a_set, elements):\n    try:\n        for el in elements:\n            a_set.add(str(el))  # Ensure elements are converted to string before adding\n        return a_set\n    except TypeError:\n        return 'Invalid input: elements must be iterable.'\n\n# Example usage\nprint(add_elements_to_set({1, 2}, [3, 4, '5']))  # Should handle mixed-type elements by converting to string"
        }
    },
    {
        "Exception": "TypeError",
        "Pair_64": {
            "buggy": "def sum_dict_values(d):\n    return sum(d.values())\n\n# Example usage\nprint(sum_dict_values({'a': 1, 'b': 2, 'c': 'three'}))",
            "fixed": "def sum_dict_values(d):\n    try:\n        return sum(float(val) for val in d.values())\n    except (TypeError, ValueError):\n        return 'Invalid input: all dictionary values must be numbers or convertible to float.'\n\n# Example usage\nprint(sum_dict_values({'a': 1, 'b': 2, 'c': 'three'}))  # Should handle mixed-type values by converting to float"
        }
    },
    {
        "Exception": "TypeError",
        "Pair_65": {
            "buggy": "def multiply_dict_values(d, factor):\n    return {k: v * factor for k, v in d.items()}\n\n# Example usage\nprint(multiply_dict_values({'a': 1, 'b': 2, 'c': 'three'}, 2))",
            "fixed": "def multiply_dict_values(d, factor):\n    try:\n        return {k: float(v) * float(factor) for k, v in d.items()}\n    except (TypeError, ValueError):\n        return 'Invalid input: all dictionary values and factor must be numbers or convertible to float.'\n\n# Example usage\nprint(multiply_dict_values({'a': 1, 'b': 2, 'c': 'three'}, 2))  # Should handle mixed-type values and factor by converting to float"
        }
    },
    {
        "Exception": "TypeError",
        "Pair_66": {
            "buggy": "def concatenate_dict_values(d1, d2):\n    return {k: d1[k] + d2[k] for k in d1}\n\n# Example usage\nprint(concatenate_dict_values({'a': 'hello', 'b': 'world'}, {'a': ' ', 'b': 2}))",
            "fixed": "def concatenate_dict_values(d1, d2):\n    try:\n        return {k: str(d1[k]) + str(d2[k]) for k in d1}\n    except TypeError:\n        return 'Invalid input: all dictionary values must be convertible to strings.'\n\n# Example usage\nprint(concatenate_dict_values({'a': 'hello', 'b': 'world'}, {'a': ' ', 'b': 2}))  # Should handle mixed-type values by converting to string"
        }
    },
    {
        "Exception": "TypeError",
        "Pair_67": {
            "buggy": "def invert_dictionary(d):\n    return {v: k for k, v in d.items()}\n\n# Example usage\nprint(invert_dictionary({'a': 1, 'b': 1, 'c': 0}))",
            "fixed": "def invert_dictionary(d):\n    try:\n        inv_dict = {}\n        for k, v in d.items():\n            if v in inv_dict:\n                return 'Invalid input: Duplicate values in dictionary.'\n            inv_dict[v] = k\n        return inv_dict\n    except TypeError:\n        return 'Invalid input: dictionary values must be hashable.'\n\n# Example usage\nprint(invert_dictionary({'a': 1, 'b': 1, 'c': 0}))  # Should handle duplicate or non-hashable values"
        }
    },
    {
        "Exception": "TypeError",
        "Pair_68": {
            "buggy": "def modify_tuple(tpl, index, value):\n    tpl[index] = value\n    return tpl\n\n# Example usage\nprint(modify_tuple((1, 2, 3), 1, 4))",
            "fixed": "def modify_tuple(tpl, index, value):\n    try:\n        lst = list(tpl)\n        lst[index] = value\n        return tuple(lst)\n    except TypeError:\n        return 'Invalid input: first argument must be a tuple.'\n    except IndexError:\n        return 'Invalid input: index out of range.'\n\n# Example usage\nprint(modify_tuple((1, 2, 3), 1, 4))  # Should handle immutability by converting to list temporarily"
        }
    },
    {
        "Exception": "TypeError",
        "Pair_69": {
            "buggy": "def combine_dicts(*dicts):\n    combined = {}\n    for d in dicts:\n        combined.update(d)\n    return combined\n\n# Example usage\nprint(combine_dicts({'a': 1}, 'not a dict'))",
            "fixed": "def combine_dicts(*dicts):\n    combined = {}\n    try:\n        for d in dicts:\n            combined.update(d)\n        return combined\n    except TypeError:\n        return 'Invalid input: all arguments must be dictionaries.'\n\n# Example usage\nprint(combine_dicts({'a': 1}, 'not a dict'))  # Should handle non-dictionary arguments"
        }
    },
    {
        "Exception": "TypeError",
        "Pair_70": {
            "buggy": "def dict_keys_to_upper(d):\n    return {k.upper(): v for k, v in d.items()}\n\n# Example usage\nprint(dict_keys_to_upper({'a': 1, 2: 'b'}))",
            "fixed": "def dict_keys_to_upper(d):\n    try:\n        return {str(k).upper(): v for k, v in d.items()}\n    except AttributeError:\n        return 'Invalid input: all dictionary keys must be string-convertible.'\n\n# Example usage\nprint(dict_keys_to_upper({'a': 1, 2: 'b'}))  # Should handle non-string keys by converting to string"
        }
    },
    {
        "Exception": "TypeError",
        "Pair_71": {
            "buggy": "def merge_lists_sorted(a, b):\n    return sorted(a + b)\n\n# Example usage\nprint(merge_lists_sorted([1, 3, 5], '246'))",
            "fixed": "def merge_lists_sorted(a, b):\n    try:\n        return sorted(list(a) + list(b))\n    except TypeError:\n        return 'Invalid input: both arguments must be list-like.'\n\n# Example usage\nprint(merge_lists_sorted([1, 3, 5], '246'))  # Should handle non-list arguments by converting to list"
        }
    },
    {
        "Exception": "TypeError",
        "Pair_72": {
            "buggy": "def max_list_element(lst):\n    return max(lst)\n\n# Example usage\nprint(max_list_element([1, 2, 'three']))",
            "fixed": "def max_list_element(lst):\n    try:\n        return max(float(el) for el in lst)\n    except (TypeError, ValueError):\n        return 'Invalid input: all elements must be numbers.'\n\n# Example usage\nprint(max_list_element([1, 2, 'three']))  # Should handle mixed-type elements by converting to float"
        }
    },
    {
        "Exception": "TypeError",
        "Pair_73": {
            "buggy": "def sum_list_elements():\n    result = sum(['1', '2', '3'])\n    print(result)\nsum_list_elements()",
            "fixed": "def sum_list_elements():\n    result = sum(int(x) for x in ['1', '2', '3'])\n    print(result)\n\nsum_list_elements()  # Should convert string elements to integers before summing"
        }
    },
    {
        "Exception": "TypeError",
        "Pair_74": {
            "buggy": "def join_items():\n    items = ['Apples', 'Bananas', 5]\n    result = ', '.join(items)\n    print(result)\njoin_items()",
            "fixed": "def join_items():\n    items = ['Apples', 'Bananas', 5]\n    result = ', '.join(str(item) for item in items)\n    print(result)\n\njoin_items()  # Should convert all elements to strings before joining"
        }
    },
    {
        "Exception": "TypeError",
        "Pair_75": {
            "buggy": "def format_output():\n    message = 'Error code: %s at %d' % 'ERR42', 10\n    print(message)\nformat_output()",
            "fixed": "def format_output():\n    message = 'Error code: %s at %d' % ('ERR42', 10)\n    print(message)\n\nformat_output()  # Should use a tuple for multiple formatting values"
        }
    },
    {
        "Exception": "TypeError",
        "Pair_76": {
            "buggy": "def read_binary_file():\n    with open('file.bin', 'rb') as f:\n        data = f.read()\n    return data.decode('utf-8')\nprint(read_binary_file())",
            "fixed": "def read_binary_file():\n    with open('file.bin', 'rb') as f:\n        data = f.read()\n    return data.decode('utf-8') if isinstance(data, bytes) else data\n\nprint(read_binary_file())  # Should check if data is of type bytes before decoding"
        }
    },
    {
        "Exception": "TypeError",
        "Pair_77": {
            "buggy": "def multiply_elements():\n    nums = [2, '3', 4]\n    result = [num * 2 for num in nums]\n    print(result)\nmultiply_elements()",
            "fixed": "def multiply_elements():\n    nums = [2, '3', 4]\n    result = [int(num) * 2 for num in nums]\n    print(result)\n\nmultiply_elements()  # Should convert all elements to integers before multiplying"
        }
    },
    {
        "Exception": "TypeError",
        "Pair_78": {
            "buggy": "def hex_conversion():\n    nums = [10, '15', 20]\n    result = [hex(num) for num in nums]\n    print(result)\nhex_conversion()",
            "fixed": "def hex_conversion():\n    nums = [10, '15', 20]\n    result = [hex(int(num)) for num in nums]\n    print(result)\n\nhex_conversion()  # Should convert all elements to integers before converting to hex"
        }
    },
    {
        "Exception": "TypeError",
        "Pair_79": {
            "buggy": "def average_values():\n    values = [3.5, '2.5', 4.0]\n    avg = sum(values) / len(values)\n    print(avg)\naverage_values()",
            "fixed": "def average_values():\n    values = [3.5, '2.5', 4.0]\n    avg = sum(float(val) for val in values) / len(values)\n    print(avg)\n\naverage_values()  # Should convert all elements to float before summing"
        }
    },
    {
        "Exception": "TypeError",
        "Pair_80": {
            "buggy": "def merge_dictionaries():\n    dict1 = {1: 'a', 2: 'b'}\n    dict2 = {2: 'c', 3: 4}\n    merged = dict1 + dict2\n    print(merged)\nmerge_dictionaries()",
            "fixed": "def merge_dictionaries():\n    dict1 = {1: 'a', 2: 'b'}\n    dict2 = {2: 'c', 3: 4}\n    merged = {**dict1, **dict2}\n    print(merged)\n\nmerge_dictionaries()  # Should use dictionary unpacking to merge dictionaries"
        }
    },
    {
        "Exception": "TypeError",
        "Pair_81": {
            "buggy": "def byte_to_int():\n    byte_val = b'110'\n    result = int(byte_val)\n    print(result)\nbyte_to_int()",
            "fixed": "def byte_to_int():\n    byte_val = b'110'\n    result = int(byte_val.decode('utf-8'))\n    print(result)\n\nbyte_to_int()  # Should decode bytes to string before converting to int"
        }
    },
    {
        "Exception": "TypeError",
        "Pair_82": {
            "buggy": "def sum_mixed_list():\n    values = [1, 2, 'three']\n    result = sum(values)\n    print(result)\nsum_mixed_list()",
            "fixed": "def sum_mixed_list():\n    values = [1, 2, 'three']\n    result = sum(int(v) for v in values if isinstance(v, int) or v.isdigit())\n    print(result)\n\nsum_mixed_list()  # Should convert string numbers to integers before summing"
        }
    },
    {
        "Exception": "NameError",
        "Pair_83": {
            "buggy": "def greet():\n    print('Hello, ' + name)\ngreet()",
            "fixed": "def greet(name):\n    print('Hello, ' + name)\ngreet('Alice')"
        }
    },
    {
        "Exception": "NameError",
        "Pair_84": {
            "buggy": "def add_numbers(x, y):\n    return x + y\n\nresult = add_numbers(5, 10)\nprint(summ)",
            "fixed": "def add_numbers(x, y):\n    return x + y\n\nresult = add_numbers(5, 10)\nprint(result)"
        }
    },
    {
        "Exception": "NameError",
        "Pair_85": {
            "buggy": "def find_length(my_list):\n    print(lenght(my_list))\n\nfind_length([1, 2, 3])",
            "fixed": "def find_length(my_list):\n    print(len(my_list))\n\nfind_length([1, 2, 3])"
        }
    },
    {
        "Exception": "NameError",
        "Pair_86": {
            "buggy": "total = 100\ndef subtract_amount(amount):\n    return total - ammount\nprint(subtract_amount(10))",
            "fixed": "total = 100\ndef subtract_amount(amount):\n    return total - amount\nprint(subtract_amount(10))"
        }
    },
    {
        "Exception": "NameError",
        "Pair_87": {
            "buggy": "def initialize():\n    global total_sum\n    total_sum = 0\ndef add_to_sum(value):\n    total += value\n\ninitialize()\nadd_to_sum(10)\nprint(total_sum)",
            "fixed": "def initialize():\n    global total_sum\n    total_sum = 0\ndef add_to_sum(value):\n    global total_sum\n    total_sum += value\n\ninitialize()\nadd_to_sum(10)\nprint(total_sum)"
        }
    },
    {
        "Exception": "NameError",
        "Pair_88": {
            "buggy": "def print_item():\n    items = [1, 2, 3]\n    for itm in items:\n        print(item)\nprint_item()",
            "fixed": "def print_item():\n    items = [1, 2, 3]\n    for itm in items:\n        print(itm)\nprint_item()"
        }
    },
    {
        "Exception": "NameError",
        "Pair_89": {
            "buggy": "def calculate_area(radius):\n    return pi * radius * radius\nprint(calculate_area(5))",
            "fixed": "import math\ndef calculate_area(radius):\n    return math.pi * radius * radius\nprint(calculate_area(5))"
        }
    },
    {
        "Exception": "NameError",
        "Pair_90": {
            "buggy": "def display_sum():\n    a, b = 5, 10\n    print(sum(a, b))\ndisplay_sum()",
            "fixed": "def display_sum():\n    a, b = 5, 10\n    print(a + b)\ndisplay_sum()"
        }
    },
    {
        "Exception": "NameError",
        "Pair_91": {
            "buggy": "def increment_value():\n    val = 5\n    val = val + increase\n    print(val)\nincrement_value()",
            "fixed": "def increment_value(increase):\n    val = 5\n    val = val + increase\n    print(val)\nincrement_value(10)"
        }
    },
    {
        "Exception": "NameError",
        "Pair_92": {
            "buggy": "def double_number(num):\n    retrun num * 2\nprint(double_number(4))",
            "fixed": "def double_number(num):\n    return num * 2\nprint(double_number(4))"
        }
    },
    {
        "Exception": "NameError",
        "Pair_93": {
            "buggy": "value1 = 10\nvalue2 = 15\nresult = value1 + value2\nprint(resul)",
            "fixed": "value1 = 10\nvalue2 = 15\nresult = value1 + value2\nprint(result)"
        }
    },
    {
        "Exception": "NameError",
        "Pair_94": {
            "buggy": "x = 5\ny = 10\nprint('The sum is:', x + z)",
            "fixed": "x = 5\ny = 10\nz = x + y\nprint('The sum is:', z)"
        }
    },
    {
        "Exception": "NameError",
        "Pair_95": {
            "buggy": "def calculate_sum():\n    num1 = 3\n    num2 = 4\n    total = num1 + num3\n    print(total)\ncalculate_sum()",
            "fixed": "def calculate_sum():\n    num1 = 3\n    num2 = 4\n    total = num1 + num2\n    print(total)\ncalculate_sum()"
        }
    },
    {
        "Exception": "NameError",
        "Pair_96": {
            "buggy": "name = 'Alice'\ngreeting = 'Hello ' + fullname\nprint(greeting)",
            "fixed": "name = 'Alice'\nfullname = name\n    # or other logic to define fullname\n    greeting = 'Hello ' + fullname\nprint(greeting)"
        }
    },
    {
        "Exception": "NameError",
        "Pair_97": {
            "buggy": "temperature_celsius = 22\ntemperature_fahrenheit = (temperature_celsius * 9/5) + 32\nprint(temp_fahrenheit)",
            "fixed": "temperature_celsius = 22\ntemperature_fahrenheit = (temperature_celsius * 9/5) + 32\nprint(temperature_fahrenheit)"
        }
    },
    {
        "Exception": "NameError",
        "Pair_98": {
            "buggy": "def calculate_distance(speed, time):\n    distance = speed * time\n    return dist\n\nprint(calculate_distance(50, 2))",
            "fixed": "def calculate_distance(speed, time):\n    distance = speed * time\n    return distance\n\nprint(calculate_distance(50, 2))"
        }
    },
    {
        "Exception": "NameError",
        "Pair_99": {
            "buggy": "price_per_unit = 20\nnumber_of_units = 5\ntotal_cost = price_per_unit * number_of_units\nprint(total_price)",
            "fixed": "price_per_unit = 20\nnumber_of_units = 5\ntotal_cost = price_per_unit * number_of_units\nprint(total_cost)"
        }
    },
    {
        "Exception": "NameError",
        "Pair_100": {
            "buggy": "def print_greeting(name):\n    greet = 'Hello, ' + name1\n    print(greet)\n\nprint_greeting('John')",
            "fixed": "def print_greeting(name):\n    greet = 'Hello, ' + name\n    print(greet)\n\nprint_greeting('John')"
        }
    },
    {
        "Exception": "NameError",
        "Pair_101": {
            "buggy": "width = 10\nheight = 20\narea = width * height\nprint(area_sq)",
            "fixed": "width = 10\nheight = 20\narea_sq = width * height\nprint(area_sq)"
        }
    },
    {
        "Exception": "NameError",
        "Pair_102": {
            "buggy": "student_name = 'Emma'\nprint(Student_name)",
            "fixed": "student_name = 'Emma'\nprint(student_name)"
        }
    },
    {
        "Exception": "NameError",
        "Pair_103": {
            "buggy": "class Calculator:\n    def add(self, a, b):\n        return a + b\n\ncalc = Calculator()\nresult = calc.add(5, 10)\nprint(summation)",
            "fixed": "class Calculator:\n    def add(self, a, b):\n        return a + b\n\ncalc = Calculator()\nresult = calc.add(5, 10)\nprint(result)  # Correct variable name should be used"
        }
    },
    {
        "Exception": "NameError",
        "Pair_104": {
            "buggy": "def find_maximum(nums):\n    max_num = float('-inf')\n    for number in nums:\n        if number > max:\n            max = number\n    return max\n\nprint(find_maximum([1, 2, 3, 4]))",
            "fixed": "def find_maximum(nums):\n    max_num = float('-inf')\n    for number in nums:\n        if number > max_num:\n            max_num = number\n    return max_num\n\nprint(find_maximum([1, 2, 3, 4]))  # Correct variable name should be used"
        }
    },
    {
        "Exception": "NameError",
        "Pair_105": {
            "buggy": "class Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n\n    def area(self):\n        return self.width * self.heigt\n\nrect = Rectangle(10, 20)\nprint(rect.area())",
            "fixed": "class Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n\n    def area(self):\n        return self.width * self.height\n\nrect = Rectangle(10, 20)\nprint(rect.area())  # Correct attribute name should be used"
        }
    },
    {
        "Exception": "NameError",
        "Pair_106": {
            "buggy": "def calculate_square_root(number):\n    return number ** 0.5\n\nresult = square_root(25)\nprint(result)",
            "fixed": "def calculate_square_root(number):\n    return number ** 0.5\n\nresult = calculate_square_root(25)\nprint(result)  # Correct function name should be used"
        }
    },
    {
        "Exception": "NameError",
        "Pair_107": {
            "buggy": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def greet(self):\n        print('Hello, my name is ' + self.nam)\n\np = Person('Alice', 25)\np.greet()",
            "fixed": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def greet(self):\n        print('Hello, my name is ' + self.name)\n\np = Person('Alice', 25)\np.greet()  # Correct attribute name should be used"
        }
    },
    {
        "Exception": "NameError",
        "Pair_108": {
            "buggy": "def compute_average(numbers):\n    total = sum(numbers)\n    avg = total / len(number)\n    return avg\n\nprint(compute_average([10, 20, 30]))",
            "fixed": "def compute_average(numbers):\n    total = sum(numbers)\n    avg = total / len(numbers)\n    return avg\n\nprint(compute_average([10, 20, 30]))  # Correct variable name should be used in len function"
        }
    },
    {
        "Exception": "NameError",
        "Pair_109": {
            "buggy": "def find_min(numbers):\n    minimum = numbers[0]\n    for num in numbers:\n        if num < minim:\n            minim = num\n    return minimum\n\nprint(find_min([4, 2, 7, 1]))",
            "fixed": "def find_min(numbers):\n    minimum = numbers[0]\n    for num in numbers:\n        if num < minimum:\n            minimum = num\n    return minimum\n\nprint(find_min([4, 2, 7, 1]))  # Correct variable name should be used"
        }
    },
    {
        "Exception": "NameError",
        "Pair_110": {
            "buggy": "def concatenate_strings(str1, str2):\n    return str1 + str2\n\nresult = concat_strings('Hello', 'World')\nprint(result)",
            "fixed": "def concatenate_strings(str1, str2):\n    return str1 + str2\n\nresult = concatenate_strings('Hello', 'World')\nprint(result)  # Correct function name should be used"
        }
    },
    {
        "Exception": "NameError",
        "Pair_111": {
            "buggy": "def calculate_difference(a, b):\n    diff = a - b\n    return diference\n\nprint(calculate_difference(15, 5))",
            "fixed": "def calculate_difference(a, b):\n    diff = a - b\n    return diff\n\nprint(calculate_difference(15, 5))  # Correct variable name should be used"
        }
    },
    {
        "Exception": "NameError",
        "Pair_112": {
            "buggy": "def print_message(message):\n    print(mesage)\n\nprint_message('Hello, world!')",
            "fixed": "def print_message(message):\n    print(message)\n\nprint_message('Hello, world!')  # Correct variable name should be used"
        }
    },
    {
        "Exception": "ValueError",
        "Pair_113": {
            "buggy": "temperature = float('36.6°C')\nprint(temperature)",
            "fixed": "temperature_str = '36.6°C'\ntemperature = float(temperature_str.replace('°C', ''))\nprint(temperature)"
        }
    },
    {
        "Exception": "ValueError",
        "Pair_114": {
            "buggy": "date_string = '2021-13-01'\ndate = datetime.strptime(date_string, '%Y-%m-%d')\nprint(date)",
            "fixed": "from datetime import datetime\n\ndate_string = '2021-12-01'\ndate = datetime.strptime(date_string, '%Y-%m-%d')\nprint(date)"
        }
    },
    {
        "Exception": "ValueError",
        "Pair_115": {
            "buggy": "num_list = list(map(int, ['1', 'two', '3']))\nprint(num_list)",
            "fixed": "num_list = []\nfor i in ['1', 'two', '3']:\n    try:\n        num_list.append(int(i))\n    except ValueError:\n        num_list.append(0)  # or handle the error accordingly\nprint(num_list)"
        }
    },
    {
        "Exception": "ValueError",
        "Pair_116": {
            "buggy": "price = float('$123.45')\nprint(price)",
            "fixed": "price_str = '$123.45'\nprice = float(price_str.replace('$', ''))\nprint(price)"
        }
    },
    {
        "Exception": "ValueError",
        "Pair_117": {
            "buggy": "binary_string = '10102'\nbinary_value = int(binary_string, 2)\nprint(binary_value)",
            "fixed": "binary_string = '10102'\ntry:\n    binary_value = int(binary_string, 2)\nexcept ValueError:\n    binary_value = 0  # or handle the error accordingly\nprint(binary_value)"
        }
    },
    {
        "Exception": "ValueError",
        "Pair_118": {
            "buggy": "height_cm = int('170.5')\nprint(height_cm)",
            "fixed": "height_cm_str = '170.5'\nheight_cm = int(float(height_cm_str))\nprint(height_cm)"
        }
    },
    {
        "Exception": "ValueError",
        "Pair_119": {
            "buggy": "age = int('twenty')\nprint(age)",
            "fixed": "age_str = 'twenty'\ntry:\n    age = int(age_str)\nexcept ValueError:\n    age = 0  # or handle the error accordingly\nprint(age)"
        }
    },
    {
        "Exception": "ValueError",
        "Pair_120": {
            "buggy": "percentage = int('95%')\nprint(percentage)",
            "fixed": "percentage_str = '95%'\npercentage = int(percentage_str.replace('%', ''))\nprint(percentage)"
        }
    },
    {
        "Exception": "ValueError",
        "Pair_121": {
            "buggy": "complex_num = complex('5+7i')\nprint(complex_num)",
            "fixed": "complex_num_str = '5+7i'\ncomplex_num = complex_num_str.replace('i', 'j')\ncomplex_num = complex(complex_num)\nprint(complex_num)"
        }
    },
    {
        "Exception": "ValueError",
        "Pair_122": {
            "buggy": "hex_value = int('0xFG', 16)\nprint(hex_value)",
            "fixed": "hex_value_str = '0xFG'\ntry:\n    hex_value = int(hex_value_str, 16)\nexcept ValueError:\n    hex_value = 0  # or handle the error accordingly\nprint(hex_value)"
        }
    },
    {
        "Exception": "ValueError",
        "Pair_123": {
            "buggy": "speed = int('60km/h')\nprint(f\"Speed: {speed} km/h\")",
            "fixed": "speed_str = '60km/h'\nspeed = int(speed_str.replace('km/h', '').strip())\nprint(f\"Speed: {speed} km/h\")"
        }
    },
    {
        "Exception": "ValueError",
        "Pair_124": {
            "buggy": "temperature = float('28.5F')\nprint(f\"Temperature: {temperature}°C\")",
            "fixed": "temperature_str = '28.5F'\ntemperature = float(temperature_str.replace('F', '').strip())\nprint(f\"Temperature: {temperature}°C\")"
        }
    },
    {
        "Exception": "ValueError",
        "Pair_125": {
            "buggy": "price = float('123,45')\nprint(f\"Price: {price} dollars\")",
            "fixed": "price_str = '123,45'\nprice = float(price_str.replace(',', '.'))\nprint(f\"Price: {price} dollars\")"
        }
    },
    {
        "Exception": "ValueError",
        "Pair_126": {
            "buggy": "num = int(' 100 ')\nprint(f\"Number is {num}\")",
            "fixed": "num = int('100')\nprint(f\"Number is {num}\")"
        }
    },
    {
        "Exception": "ValueError",
        "Pair_127": {
            "buggy": "height = float('six feet')\nprint(f\"Height: {height} meters\")",
            "fixed": "height_str = 'six feet'\nheights = {'six': 6, 'feet': 1}\nheight = float(heights['six'] * heights['feet'])\nprint(f\"Height: {height} meters\")"
        }
    },
    {
        "Exception": "ValueError",
        "Pair_128": {
            "buggy": "binary_num = int('10102', 2)\nprint(f\"Binary number: {binary_num}\")",
            "fixed": "binary_str = '10102'\ntry:\n    binary_num = int(binary_str, 2)\nexcept ValueError:\n    binary_num = 0  # handle accordingly\nprint(f\"Binary number: {binary_num}\")"
        }
    },
    {
        "Exception": "ValueError",
        "Pair_129": {
            "buggy": "percentage = int('98 percent')\nprint(f\"Percentage: {percentage}%\")",
            "fixed": "percentage_str = '98 percent'\npercentage = int(percentage_str.replace('percent', '').strip())\nprint(f\"Percentage: {percentage}%\")"
        }
    },
    {
        "Exception": "ValueError",
        "Pair_130": {
            "buggy": "decimal_num = int('7.5')\nprint(f\"Decimal: {decimal_num}\")",
            "fixed": "decimal_str = '7.5'\ndecimal_num = int(float(decimal_str))\nprint(f\"Decimal: {decimal_num}\")"
        }
    },
    {
        "Exception": "ValueError",
        "Pair_131": {
            "buggy": "currency = float('$1000')\nprint(f\"Currency value: {currency}\")",
            "fixed": "currency_str = '$1000'\ncurrency = float(currency_str.replace('$', '').strip())\nprint(f\"Currency value: {currency}\")"
        }
    },
    {
        "Exception": "ValueError",
        "Pair_132": {
            "buggy": "octal_value = int('078', 8)\nprint(f\"Octal value: {octal_value}\")",
            "fixed": "octal_str = '078'\ntry:\n    octal_value = int(octal_str, 8)\nexcept ValueError:\n    octal_value = 0  # handle accordingly\nprint(f\"Octal value: {octal_value}\")"
        }
    },
    {
        "Exception": "ValueError",
        "Pair_133": {
            "buggy": "weights_in_pounds = {'apple': '0.5', 'banana': '0.3', 'cherry': '0.2lbs'}\nweights_in_kg = {}\nfor fruit, weight in weights_in_pounds.items():\n    weights_in_kg[fruit] = round(float(weight) * 0.453592, 2)\nprint(weights_in_kg)",
            "fixed": "weights_in_pounds = {'apple': '0.5', 'banana': '0.3', 'cherry': '0.2lbs'}\nweights_in_kg = {}\nfor fruit, weight in weights_in_pounds.items():\n    weights_in_kg[fruit] = round(float(weight.replace('lbs', '')) * 0.453592, 2) if 'lbs' in weight else round(float(weight) * 0.453592, 2)\nprint(weights_in_kg)"
        }
    },
    {
        "Exception": "ValueError",
        "Pair_134": {
            "buggy": "measurements = {'length': '30cm', 'width': '10cm', 'height': '15cm'}\nmeasurements_float = {key: float(value) for key, value in measurements.items()}\nprint(measurements_float)",
            "fixed": "measurements = {'length': '30cm', 'width': '10cm', 'height': '15cm'}\nmeasurements_float = {key: float(value.replace('cm', '')) for key, value in measurements.items()}\nprint(measurements_float)"
        }
    },
    {
        "Exception": "ValueError",
        "Pair_135": {
            "buggy": "distances = {'A to B': '100.5km', 'B to C': '85km', 'C to D': '45 miles'}\ndistances_float = {route: float(distance) for route, distance in distances.items()}\nprint(distances_float)",
            "fixed": "distances = {'A to B': '100.5km', 'B to C': '85km', 'C to D': '45 miles'}\ndistances_float = {}\nfor route, distance in distances.items():\n    if 'km' in distance:\n        distances_float[route] = float(distance.replace('km', ''))\n    elif 'miles' in distance:\n        distances_float[route] = float(distance.replace('miles', '')) * 1.60934\nprint(distances_float)"
        }
    },
    {
        "Exception": "ValueError",
        "Pair_136": {
            "buggy": "grades = {'math': 'A+', 'science': 'B', 'language': 'C+'}\ngrade_point = {subject: float(grade) for subject, grade in grades.items()}\nprint(grade_point)",
            "fixed": "grades = {'math': 'A+', 'science': 'B', 'language': 'C+'}\ngrade_point = {}\nconversion = {'A+': 4.3, 'A': 4.0, 'A-': 3.7, 'B+': 3.3, 'B': 3.0, 'B-': 2.7, 'C+': 2.3, 'C': 2.0, 'C-': 1.7}\nfor subject, grade in grades.items():\n    grade_point[subject] = conversion.get(grade, 0)\nprint(grade_point)"
        }
    },
    {
        "Exception": "ValueError",
        "Pair_137": {
            "buggy": "times = {'run': '20mins', 'swim': '15mins', 'cycle': '1 hour'}\ntimes_float = {activity: float(time) for activity, time in times.items()}\nprint(times_float)",
            "fixed": "times = {'run': '20mins', 'swim': '15mins', 'cycle': '1 hour'}\ntimes_float = {}\nfor activity, time in times.items():\n    if 'hour' in time:\n        times_float[activity] = float(time.replace(' hour', '')) * 60\n    elif 'mins' in time:\n        times_float[activity] = float(time.replace('mins', ''))\nprint(times_float)"
        }
    },
    {
        "Exception": "ValueError",
        "Pair_138": {
            "buggy": "measurements = {'temperature': '98.6F', 'pressure': '2.5bar', 'altitude': '300ft'}\nmeasures_float = {key: float(val) for key, val in measurements.items()}\nprint(measures_float)",
            "fixed": "measurements = {'temperature': '98.6F', 'pressure': '2.5bar', 'altitude': '300ft'}\nmeasures_float = {}\nfor key, val in measurements.items():\n    if 'F' in val:\n        measures_float[key] = float(val.replace('F', ''))\n    elif 'bar' in val:\n        measures_float[key] = float(val.replace('bar', ''))\n    elif 'ft' in val:\n        measures_float[key] = float(val.replace('ft', '')) * 0.3048\nprint(measures_float)"
        }
    },
    {
        "Exception": "ValueError",
        "Pair_139": {
            "buggy": "counts = {'first': '10', 'second': '20', 'third': 'thirty'}\ncounts_int = {position: int(count) for position, count in counts.items()}\nprint(counts_int)",
            "fixed": "counts = {'first': '10', 'second': '20', 'third': 'thirty'}\ncounts_int = {}\nfor position, count in counts.items():\n    try:\n        counts_int[position] = int(count)\n    except ValueError:\n        counts_int[position] = 0  # handle accordingly\nprint(counts_int)"
        }
    },
    {
        "Exception": "ValueError",
        "Pair_140": {
            "buggy": "coordinates = {'x': '12.3deg', 'y': '45.6deg', 'z': '78.9deg'}\ncoords_float = {axis: float(value) for axis, value in coordinates.items()}\nprint(coords_float)",
            "fixed": "coordinates = {'x': '12.3deg', 'y': '45.6deg', 'z': '78.9deg'}\ncoords_float = {axis: float(value.replace('deg', '')) for axis, value in coordinates.items()}\nprint(coords_float)"
        }
    },
    {
        "Exception": "ValueError",
        "Pair_141": {
            "buggy": "rates = {'USD': '1.1EUR', 'GBP': '1.3EUR', 'JPY': '0.009EUR'}\nrates_float = {currency: float(rate) for currency, rate in rates.items()}\nprint(rates_float)",
            "fixed": "rates = {'USD': '1.1EUR', 'GBP': '1.3EUR', 'JPY': '0.009EUR'}\nrates_float = {currency: float(rate.replace('EUR', '')) for currency, rate in rates.items()}\nprint(rates_float)"
        }
    },
    {
        "Exception": "ValueError",
        "Pair_142": {
            "buggy": "data_sizes = {'file1': '2GB', 'file2': '750MB', 'file3': '1.2TB'}\ndata_sizes_float = {file: float(size) for file, size in data_sizes.items()}\nprint(data_sizes_float)",
            "fixed": "data_sizes = {'file1': '2GB', 'file2': '750MB', 'file3': '1.2TB'}\ndata_sizes_float = {}\nfor file, size in data_sizes.items():\n    if 'GB' in size:\n        data_sizes_float[file] = float(size.replace('GB', ''))\n    elif 'MB' in size:\n        data_sizes_float[file] = float(size.replace('MB', '')) / 1024\n    elif 'TB' in size:\n        data_sizes_float[file] = float(size.replace('TB', '')) * 1024\nprint(data_sizes_float)"
        }
    },
    {
        "Exception": "AttributeError",
        "Pair_143": {
            "buggy": "class Person:\n    def __init__(self, name):\n        self.name = name\n\np = Person('Alice')\np.append('Engineer')",
            "fixed": "class Person:\n    def __init__(self, name):\n        self.name = name\n        self.occupations = []\n\np = Person('Alice')\np.occupations.append('Engineer')"
        }
    },
    {
        "Exception": "AttributeError",
        "Pair_144": {
            "buggy": "numbers = [1, 2, 3, 4]\ntotal = 0\nfor num in numbers:\n    total = total.add(num)\nprint(total)",
            "fixed": "numbers = [1, 2, 3, 4]\ntotal = 0\nfor num in numbers:\n    total += num\nprint(total)"
        }
    },
    {
        "Exception": "AttributeError",
        "Pair_145": {
            "buggy": "sentence = 'Hello World'\nfor char in sentence:\n    char.lower()\nprint(sentence)",
            "fixed": "sentence = 'Hello World'\nlowered_sentence = ''.join([char.lower() for char in sentence])\nprint(lowered_sentence)"
        }
    },
    {
        "Exception": "AttributeError",
        "Pair_146": {
            "buggy": "data = {'a': 1, 'b': 2, 'c': 3}\ndata.keys().clear()\nprint(data)",
            "fixed": "data = {'a': 1, 'b': 2, 'c': 3}\ndata.clear()\nprint(data)"
        }
    },
    {
        "Exception": "AttributeError",
        "Pair_147": {
            "buggy": "items = [1, 2, 3]\nitems.sort(reverse=True)\nreversed(items)",
            "fixed": "items = [1, 2, 3]\nitems.sort(reverse=True)\nprint(items)  # items are already reversed using sort"
        }
    },
    {
        "Exception": "AttributeError",
        "Pair_148": {
            "buggy": "class CustomList(list):\n    def add(self, value):\n        self.add(value)\nmy_list = CustomList([1, 2, 3])\nmy_list.add(4)\nprint(my_list)",
            "fixed": "class CustomList(list):\n    def add(self, value):\n        self.append(value)\nmy_list = CustomList([1, 2, 3])\nmy_list.add(4)\nprint(my_list)"
        }
    },
    {
        "Exception": "AttributeError",
        "Pair_149": {
            "buggy": "import math\nresult = math.sqrt(25)\nresult.append(5)\nprint(result)",
            "fixed": "import math\nresult = [math.sqrt(25)]\nresult.append(5)\nprint(result)"
        }
    },
    {
        "Exception": "AttributeError",
        "Pair_150": {
            "buggy": "class Circle:\n    def __init__(self, radius):\n        self.radius = radius\n\nc = Circle(3)\nc.append_area()\nprint(c.radius)",
            "fixed": "class Circle:\n    def __init__(self, radius):\n        self.radius = radius\n\n    def area(self):\n        return 3.14 * self.radius ** 2\n\nc = Circle(3)\nprint(c.area())"
        }
    },
    {
        "Exception": "AttributeError",
        "Pair_151": {
            "buggy": "words = 'Hello world'.split()\nwords.upper()\nprint(words)",
            "fixed": "words = 'Hello world'.split()\nwords = [word.upper() for word in words]\nprint(words)"
        }
    },
    {
        "Exception": "AttributeError",
        "Pair_152": {
            "buggy": "tuple_data = (1, 2, 3)\ntuple_data.sort()\nprint(tuple_data)",
            "fixed": "tuple_data = (1, 2, 3)\nsorted_data = sorted(tuple_data)\nprint(sorted_data)"
        }
    },
    {
        "Exception": "AttributeError",
        "Pair_153": {
            "buggy": "text = 'hello'\ntext_items = text.split()\ntext_items.reverse()\ntext_items.reversed()\nprint(text_items)",
            "fixed": "text = 'hello'\ntext_items = list(text)\ntext_items.reverse()\nprint(text_items)"
        }
    },
    {
        "Exception": "AttributeError",
        "Pair_154": {
            "buggy": "class Vehicle:\n    def __init__(self, make, model):\n        self.make = make\n        self.model = model\n\ncar = Vehicle('Toyota', 'Corolla')\nprint(car.get('make'))",
            "fixed": "class Vehicle:\n    def __init__(self, make, model):\n        self.make = make\n        self.model = model\n\ncar = Vehicle('Toyota', 'Corolla')\nprint(car.make)"
        }
    },
    {
        "Exception": "AttributeError",
        "Pair_155": {
            "buggy": "class Employee:\n    def __init__(self, name, position):\n        self.name = name\n        self.position = position\n\nemp = Employee('John Doe', 'Manager')\nemp['salary'] = 50000",
            "fixed": "class Employee:\n    def __init__(self, name, position):\n        self.name = name\n        self.position = position\n        self.salary = None\n\nemp = Employee('John Doe', 'Manager')\nemp.salary = 50000"
        }
    },
    {
        "Exception": "AttributeError",
        "Pair_156": {
            "buggy": "string_list = ['hello', 'world']\nstring_list.reverse().capwords()\nprint(string_list)",
            "fixed": "string_list = ['hello', 'world']\nstring_list.reverse()\nstring_list = [s.capitalize() for s in string_list]\nprint(string_list)"
        }
    },
    {
        "Exception": "AttributeError",
        "Pair_157": {
            "buggy": "class Student:\n    def __init__(self, name, grade):\n        self.name = name\n        self.grade = grade\n\nstd = Student('Alice', 'A')\nstd['age'] = 20",
            "fixed": "class Student:\n    def __init__(self, name, grade):\n        self.name = name\n        self.grade = grade\n        self.age = None\n\nstd = Student('Alice', 'A')\nstd.age = 20"
        }
    },
    {
        "Exception": "AttributeError",
        "Pair_158": {
            "buggy": "integer_values = [1, 3, 5, 7]\ninteger_values.remove(3).append(9)\nprint(integer_values)",
            "fixed": "integer_values = [1, 3, 5, 7]\ninteger_values.remove(3)\ninteger_values.append(9)\nprint(integer_values)"
        }
    },
    {
        "Exception": "AttributeError",
        "Pair_159": {
            "buggy": "sentence = 'This is a test'\nwords = sentence.split()\nwords.sort().capitalize()\nprint(words)",
            "fixed": "sentence = 'This is a test'\nwords = sentence.split()\nwords.sort()\nwords = [word.capitalize() for word in words]\nprint(words)"
        }
    },
    {
        "Exception": "AttributeError",
        "Pair_160": {
            "buggy": "num = 25.7\nnum.append(4)\nprint(num)",
            "fixed": "num_list = [25.7]\nnum_list.append(4)\nprint(num_list)"
        }
    },
    {
        "Exception": "AttributeError",
        "Pair_161": {
            "buggy": "data = {'key1': 'value1', 'key2': 'value2'}\ndata.insert('key3', 'value3')\nprint(data)",
            "fixed": "data = {'key1': 'value1', 'key2': 'value2'}\ndata['key3'] = 'value3'\nprint(data)"
        }
    },
    {
        "Exception": "AttributeError",
        "Pair_162": {
            "buggy": "num_list = [10, 20, 30]\nnum_list.sum()\nprint(num_list)",
            "fixed": "num_list = [10, 20, 30]\nlist_sum = sum(num_list)\nprint(list_sum)"
        }
    },
    {
        "Exception": "AttributeError",
        "Pair_163": {
            "buggy": "points = (1, 2, 3)\npoints.append(4)\nprint(points)",
            "fixed": "points = (1, 2, 3)\nnew_points = points + (4,)\nprint(new_points)"
        }
    },
    {
        "Exception": "IndexError",
        "Pair_164": {
            "buggy": "numbers = [4, 8, 15, 16, 23, 42]\nprint(numbers[6])",
            "fixed": "numbers = [4, 8, 15, 16, 23, 42]\nif len(numbers) > 6:\n    print(numbers[6])\nelse:\n    print('Index out of range')"
        }
    },
    {
        "Exception": "IndexError",
        "Pair_165": {
            "buggy": "arr = [2, 4, 6]\nfor i in range(5):\n    print(arr[i])",
            "fixed": "arr = [2, 4, 6]\nfor i in range(len(arr)):\n    print(arr[i])"
        }
    },
    {
        "Exception": "IndexError",
        "Pair_166": {
            "buggy": "list_vals = [3, 5, 7, 9]\nprint(list_vals[-5])",
            "fixed": "list_vals = [3, 5, 7, 9]\nif -5 < len(list_vals) and -5 >= -len(list_vals):\n    print(list_vals[-5])\nelse:\n    print('Index out of range')"
        }
    },
    {
        "Exception": "IndexError",
        "Pair_167": {
            "buggy": "temperatures = [75, 80, 85]\nsum_temps = sum(temperatures[:4])\nprint(sum_temps)",
            "fixed": "temperatures = [75, 80, 85]\nsum_temps = sum(temperatures)\nprint(sum_temps)"
        }
    },
    {
        "Exception": "IndexError",
        "Pair_168": {
            "buggy": "alphabets = ['a', 'b', 'c', 'd']\nprint(alphabets[4])",
            "fixed": "alphabets = ['a', 'b', 'c', 'd']\nif len(alphabets) > 4:\n    print(alphabets[4])\nelse:\n    print('Index out of range')"
        }
    },
    {
        "Exception": "IndexError",
        "Pair_169": {
            "buggy": "matrix = [[1, 2, 3], [4, 5, 6]]\nprint(matrix[2][0])",
            "fixed": "matrix = [[1, 2, 3], [4, 5, 6]]\nif len(matrix) > 2 and len(matrix[2]) > 0:\n    print(matrix[2][0])\nelse:\n    print('Index out of range')"
        }
    },
    {
        "Exception": "IndexError",
        "Pair_170": {
            "buggy": "names = ['Alice', 'Bob', 'Charlie']\nlast_name = names[3]\nprint(f'Last name: {last_name}')",
            "fixed": "names = ['Alice', 'Bob', 'Charlie']\nif len(names) > 3:\n    last_name = names[3]\nelse:\n    last_name = 'Not available'\nprint(f'Last name: {last_name}')"
        }
    },
    {
        "Exception": "IndexError",
        "Pair_171": {
            "buggy": "colors = ['red', 'green', 'blue']\nfor i in range(4):\n    print(colors[i])",
            "fixed": "colors = ['red', 'green', 'blue']\nfor i in range(len(colors)):\n    print(colors[i])"
        }
    },
    {
        "Exception": "IndexError",
        "Pair_172": {
            "buggy": "scores = [95, 85, 76]\nprint(scores[5])",
            "fixed": "scores = [95, 85, 76]\nif len(scores) > 5:\n    print(scores[5])\nelse:\n    print('Index out of range')"
        }
    },
    {
        "Exception": "IndexError",
        "Pair_173": {
            "buggy": "words = ['apple', 'banana', 'cherry']\nprint(words[len(words)])",
            "fixed": "words = ['apple', 'banana', 'cherry']\nif len(words) > len(words)-1:\n    print(words[len(words)-1])\nelse:\n    print('Index out of range')"
        }
    },
    {
        "Exception": "IndexError",
        "Pair_174": {
            "buggy": "def get_middle_element(arr):\n    length = len(arr)\n    return arr[length // 2] if length % 2 == 1 else arr[length // 2 - 1: length // 2 + 1]\n\nsample_arr = [1, 2, 3, 4, 5]\nprint(get_middle_element(sample_arr))\nsample_arr2 = [1, 2, 3, 4]\nprint(get_middle_element(sample_arr2))",
            "fixed": "def get_middle_element(arr):\n    length = len(arr)\n    if length == 0:\n        return 'Array is empty'\n    return arr[length // 2] if length % 2 == 1 else arr[length // 2 - 1: length // 2 + 1]\n\nsample_arr = [1, 2, 3, 4, 5]\nprint(get_middle_element(sample_arr))\nsample_arr2 = [1, 2, 3, 4]\nprint(get_middle_element(sample_arr2))"
        }
    },
    {
        "Exception": "IndexError",
        "Pair_175": {
            "buggy": "def get_third_element(lst):\n    return lst[2]\n\nsample_lst = [5, 3, 8]\nprint(get_third_element(sample_lst))\nsample_lst2 = [1, 2]\nprint(get_third_element(sample_lst2))",
            "fixed": "def get_third_element(lst):\n    return lst[2] if len(lst) > 2 else 'Index out of range'\n\nsample_lst = [5, 3, 8]\nprint(get_third_element(sample_lst))\nsample_lst2 = [1, 2]\nprint(get_third_element(sample_lst2))"
        }
    },
    {
        "Exception": "IndexError",
        "Pair_176": {
            "buggy": "def print_every_second_element(array):\n    for i in range(len(array)):\n        if i % 2 == 0:\n            print(array[i + 1])\n\nsample_array = [0, 1, 2, 3, 4, 5]\nprint_every_second_element(sample_array)",
            "fixed": "def print_every_second_element(array):\n    for i in range(len(array)):\n        if i % 2 == 0:\n            if i + 1 < len(array):\n                print(array[i + 1])\n            else:\n                print('Index out of range')\n\nsample_array = [0, 1, 2, 3, 4, 5]\nprint_every_second_element(sample_array)"
        }
    },
    {
        "Exception": "IndexError",
        "Pair_177": {
            "buggy": "def get_item(lst, index):\n    return lst[index]\n\nlist_items = [7, 14, 21]\nprint(get_item(list_items, 3))",
            "fixed": "def get_item(lst, index):\n    return lst[index] if index < len(lst) else 'Index out of range'\n\nlist_items = [7, 14, 21]\nprint(get_item(list_items, 3))"
        }
    },
    {
        "Exception": "IndexError",
        "Pair_178": {
            "buggy": "def slice_string(string):\n    return string[1:10]\n\ntext = \"Hi\"\nprint(slice_string(text))",
            "fixed": "def slice_string(string):\n    return string[1:10] if len(string) > 1 else 'String too short'\n\ntext = \"Hi\"\nprint(slice_string(text))"
        }
    },
    {
        "Exception": "IndexError",
        "Pair_179": {
            "buggy": "def get_five_elements(array):\n    return array[:5]\n\narr = [1, 2, 3]\nprint(get_five_elements(arr))",
            "fixed": "def get_five_elements(array):\n    return array[:5] if len(array) >= 5 else 'Array has less than five elements'\n\narr = [1, 2, 3]\nprint(get_five_elements(arr))"
        }
    },
    {
        "Exception": "IndexError",
        "Pair_180": {
            "buggy": "def retrieve_element(lst):\n    return lst[10]\n\nsample_lst = [1, 2, 3, 4, 5]\nprint(retrieve_element(sample_lst))",
            "fixed": "def retrieve_element(lst):\n    return lst[10] if len(lst) > 10 else 'Index out of range'\n\nsample_lst = [1, 2, 3, 4, 5]\nprint(retrieve_element(sample_lst))"
        }
    },
    {
        "Exception": "IndexError",
        "Pair_181": {
            "buggy": "def first_element(items):\n    return items[0]\n\nempty_list = []\nprint(first_element(empty_list))",
            "fixed": "def first_element(items):\n    return items[0] if items else 'List is empty'\n\nempty_list = []\nprint(first_element(empty_list))"
        }
    },
    {
        "Exception": "IndexError",
        "Pair_182": {
            "buggy": "def get_last_element(lst):\n    return lst[-1]\n\nexample_lst = []\nprint(get_last_element(example_lst))",
            "fixed": "def get_last_element(lst):\n    return lst[-1] if lst else 'List is empty'\n\nexample_lst = []\nprint(get_last_element(example_lst))"
        }
    },
    {
        "Exception": "IndexError",
        "Pair_183": {
            "buggy": "def access_nested_list(nested_list):\n    return nested_list[2][0]\n\nexample_nested_list = [[1, 2], [3, 4]]\nprint(access_nested_list(example_nested_list))",
            "fixed": "def access_nested_list(nested_list):\n    return nested_list[2][0] if len(nested_list) > 2 and len(nested_list[2]) > 0 else 'Index out of range'\n\nexample_nested_list = [[1, 2], [3, 4]]\nprint(access_nested_list(example_nested_list))"
        }
    },
    {
        "Exception": "IndexError",
        "Pair_184": {
            "buggy": "def get_element_by_position(matrix, row, col):\n    return matrix[row][col]\n\nexample_matrix = [[1, 2], [3, 4]]\nprint(get_element_by_position(example_matrix, 2, 1))",
            "fixed": "def get_element_by_position(matrix, row, col):\n    if row >= len(matrix) or col >= len(matrix[0]):\n        return 'Index out of range'\n    return matrix[row][col]\n\nexample_matrix = [[1, 2], [3, 4]]\nprint(get_element_by_position(example_matrix, 2, 1))"
        }
    },
    {
        "Exception": "IndexError",
        "Pair_185": {
            "buggy": "def get_prefix(string):\n    return string[:3]\n\nshort_string = 'Hi'\nprint(get_prefix(short_string))",
            "fixed": "def get_prefix(string):\n    if len(string) < 3:\n        return 'String too short'\n    return string[:3]\n\nshort_string = 'Hi'\nprint(get_prefix(short_string))"
        }
    },
    {
        "Exception": "IndexError",
        "Pair_186": {
            "buggy": "def remove_element(arr, index):\n    del arr[index]\n\nsample_array = [1, 2, 3]\nremove_element(sample_array, 3)",
            "fixed": "def remove_element(arr, index):\n    if index >= len(arr):\n        return 'Index out of range'\n    del arr[index]\n\nsample_array = [1, 2, 3]\nremove_element(sample_array, 3)"
        }
    },
    {
        "Exception": "IndexError",
        "Pair_187": {
            "buggy": "def get_sublist(lst, start, end):\n    return lst[start:end]\n\nnums = [1, 2, 3]\nprint(get_sublist(nums, 1, 5))",
            "fixed": "def get_sublist(lst, start, end):\n    if start >= len(lst) or end > len(lst):\n        return 'Index out of range'\n    return lst[start:end]\n\nnums = [1, 2, 3]\nprint(get_sublist(nums, 1, 5))"
        }
    },
    {
        "Exception": "IndexError",
        "Pair_188": {
            "buggy": "def get_last_n_elements(arr, n):\n    return arr[-n:]\n\nsample_list = [1, 2, 3]\nprint(get_last_n_elements(sample_list, 4))",
            "fixed": "def get_last_n_elements(arr, n):\n    if n > len(arr):\n        return 'Index out of range'\n    return arr[-n:]\n\nsample_list = [1, 2, 3]\nprint(get_last_n_elements(sample_list, 4))"
        }
    },
    {
        "Exception": "IndexError",
        "Pair_189": {
            "buggy": "def replace_element(arr, index, element):\n    arr[index] = element\n\nchars = ['a', 'b', 'c']\nreplace_element(chars, 4, 'd')",
            "fixed": "def replace_element(arr, index, element):\n    if index >= len(arr):\n        return 'Index out of range'\n    arr[index] = element\n\nchars = ['a', 'b', 'c']\nreplace_element(chars, 4, 'd')"
        }
    },
    {
        "Exception": "IndexError",
        "Pair_190": {
            "buggy": "def sum_first_n_elements(arr, n):\n    return sum(arr[:n])\n\nsample_list = [1, 2, 3]\nprint(sum_first_n_elements(sample_list, 5))",
            "fixed": "def sum_first_n_elements(arr, n):\n    if n > len(arr):\n        return 'Index out of range'\n    return sum(arr[:n])\n\nsample_list = [1, 2, 3]\nprint(sum_first_n_elements(sample_list, 5))"
        }
    },
    {
        "Exception": "IndexError",
        "Pair_191": {
            "buggy": "def access_tuple_element(tpl, index):\n    return tpl[index]\n\ntuple_data = (1, 2, 3)\nprint(access_tuple_element(tuple_data, 4))",
            "fixed": "def access_tuple_element(tpl, index):\n    if index >= len(tpl):\n        return 'Index out of range'\n    return tpl[index]\n\ntuple_data = (1, 2, 3)\nprint(access_tuple_element(tuple_data, 4))"
        }
    },
    {
        "Exception": "IndexError",
        "Pair_192": {
            "buggy": "def fetch_list_of_substrings(strings, indexes):\n    return [strings[i] for i in indexes]\n\nsample_strings = ['a', 'b', 'c']\nsample_indexes = [0, 3]\nprint(fetch_list_of_substrings(sample_strings, sample_indexes))",
            "fixed": "def fetch_list_of_substrings(strings, indexes):\n    try:\n        return [strings[i] for i in indexes]\n    except IndexError:\n        return 'One of the indexes is out of range'\n\nsample_strings = ['a', 'b', 'c']\nsample_indexes = [0, 3]\nprint(fetch_list_of_substrings(sample_strings, sample_indexes))"
        }
    },
    {
        "Exception": "IndexError",
        "Pair_193": {
            "buggy": "def extract_elements_between(arr, start, end):\n    return arr[start:end]\n\nnums = [1, 2, 3]\nprint(extract_elements_between(nums, 1, 4))",
            "fixed": "def extract_elements_between(arr, start, end):\n    if start >= len(arr) or end > len(arr):\n        return 'Index out of range'\n    return arr[start:end]\n\nnums = [1, 2, 3]\nprint(extract_elements_between(nums, 1, 4))"
        }
    },
    {
        "Exception": "RecursionError",
        "Pair_194": {
            "buggy": "def countdown(n):\n    print(n)\n    if n > 0:\n        countdown(n + 1)\n\ncountdown(5)",
            "fixed": "def countdown(n):\n    print(n)\n    if n > 0:\n        countdown(n - 1)\n\ncountdown(5)"
        }
    },
    {
        "Exception": "RecursionError",
        "Pair_195": {
            "buggy": "def sum_to_n(n):\n    if n == 0:\n        return 0\n    return n + sum_to_n(n + 1)\n\nprint(sum_to_n(5))",
            "fixed": "def sum_to_n(n):\n    if n == 0:\n        return 0\n    return n + sum_to_n(n - 1)\n\nprint(sum_to_n(5))"
        }
    },
    {
        "Exception": "RecursionError",
        "Pair_196": {
            "buggy": "def reverse_string(s):\n    if s == '':\n        return ''\n    return reverse_string(s[1:]) + s\n\nprint(reverse_string('hello'))",
            "fixed": "def reverse_string(s):\n    if s == '':\n        return ''\n    return reverse_string(s[1:]) + s[0]\n\nprint(reverse_string('hello'))"
        }
    },
    {
        "Exception": "RecursionError",
        "Pair_197": {
            "buggy": "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(a, b) # Forgot to subtract\n\nprint(gcd(54, 24))",
            "fixed": "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\nprint(gcd(54, 24))"
        }
    },
    {
        "Exception": "RecursionError",
        "Pair_198": {
            "buggy": "def factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n)\n\nprint(factorial(5))",
            "fixed": "def factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n - 1)\n\nprint(factorial(5))"
        }
    },
    {
        "Exception": "RecursionError",
        "Pair_199": {
            "buggy": "def is_palindrome(s):\n    if len(s) <= 1:\n        return True\n    if s[0] == s[-1]:\n        return is_palindrome(s)\n    return False\n\nprint(is_palindrome('radar'))",
            "fixed": "def is_palindrome(s):\n    if len(s) <= 1:\n        return True\n    if s[0] == s[-1]:\n        return is_palindrome(s[1:-1])\n    return False\n\nprint(is_palindrome('radar'))"
        }
    },
    {
        "Exception": "RecursionError",
        "Pair_200": {
            "buggy": "def fib(n):\n    if n <= 1:\n        return n\n    return fib(n) + fib(n - 1)\n\nprint(fib(5))",
            "fixed": "def fib(n):\n    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\nprint(fib(5))"
        }
    },
    {
        "Exception": "RecursionError",
        "Pair_201": {
            "buggy": "def binary_search(array, target, low, high):\n    if low > high:\n        return -1\n    mid = (low + high) // 2\n    if array[mid] == target:\n        return mid\n    elif array[mid] < target:\n        return binary_search(array, target, mid + 1, high)\n    else:\n        return binary_search(array, target, low, high)\n\narray = [1, 2, 3, 4, 5]\nprint(binary_search(array, 3, 0, len(array) - 1))",
            "fixed": "def binary_search(array, target, low, high):\n    if low > high:\n        return -1\n    mid = (low + high) // 2\n    if array[mid] == target:\n        return mid\n    elif array[mid] < target:\n        return binary_search(array, target, mid + 1, high)\n    else:\n        return binary_search(array, target, low, mid - 1)\n\narray = [1, 2, 3, 4, 5]\nprint(binary_search(array, 3, 0, len(array) - 1))"
        }
    },
    {
        "Exception": "RecursionError",
        "Pair_202": {
            "buggy": "def exponent(base, exp):\n    if exp == 0:\n        return 1\n    return base * exponent(base, exp)\n\nprint(exponent(2, 3))",
            "fixed": "def exponent(base, exp):\n    if exp == 0:\n        return 1\n    return base * exponent(base, exp - 1)\n\nprint(exponent(2, 3))"
        }
    },
    {
        "Exception": "RecursionError",
        "Pair_203": {
            "buggy": "def flatten_list(nested_list):\n    if not nested_list:\n        return nested_list\n    if isinstance(nested_list[0], list):\n        return flatten_list(nested_list[0]) + flatten_list(nested_list[1:])\n    return nested_list[:1] + flatten_list(nested_list)\n\nprint(flatten_list([1, [2, 3, [4]], 5]))",
            "fixed": "def flatten_list(nested_list):\n    if not nested_list:\n        return nested_list\n    if isinstance(nested_list[0], list):\n        return flatten_list(nested_list[0]) + flatten_list(nested_list[1:])\n    return nested_list[:1] + flatten_list(nested_list[1:])\n\nprint(flatten_list([1, [2, 3, [4]], 5]))"
        }
    },
    {
        "Exception": "RecursionError",
        "Pair_204": {
            "buggy": "def length_of_string(s):\n    if s == '':\n        return 0\n    return 1 + length_of_string(s)\n\nprint(length_of_string('hello'))",
            "fixed": "def length_of_string(s):\n    if s == '':\n        return 0\n    return 1 + length_of_string(s[1:])\n\nprint(length_of_string('hello'))"
        }
    },
    {
        "Exception": "RecursionError",
        "Pair_205": {
            "buggy": "def is_power_of_two(n):\n    if n == 1:\n        return True\n    if n % 2 != 0 or n == 0:\n        return False\n    return is_power_of_two(n)\n\nprint(is_power_of_two(16))",
            "fixed": "def is_power_of_two(n):\n    if n == 1:\n        return True\n    if n % 2 != 0 or n == 0:\n        return False\n    return is_power_of_two(n // 2)\n\nprint(is_power_of_two(16))"
        }
    },
    {
        "Exception": "RecursionError",
        "Pair_206": {
            "buggy": "def collatz_sequence(n):\n    print(n)\n    if n == 1:\n        return n\n    elif n % 2 == 0:\n        return collatz_sequence(n)\n    else:\n        return collatz_sequence(3 * n + 1)\n\ncollatz_sequence(6)",
            "fixed": "def collatz_sequence(n):\n    print(n)\n    if n == 1:\n        return n\n    elif n % 2 == 0:\n        return collatz_sequence(n // 2)\n    else:\n        return collatz_sequence(3 * n + 1)\n\ncollatz_sequence(6)"
        }
    },
    {
        "Exception": "RecursionError",
        "Pair_207": {
            "buggy": "def print_n_times(n, message):\n    if n == 0:\n        return\n    print(message)\n    print_n_times(n, message)\n\nprint_n_times(5, 'Hello')",
            "fixed": "def print_n_times(n, message):\n    if n == 0:\n        return\n    print(message)\n    print_n_times(n - 1, message)\n\nprint_n_times(5, 'Hello')"
        }
    },
    {
        "Exception": "RecursionError",
        "Pair_208": {
            "buggy": "def depth(tree):\n    if tree is None:\n        return 0\n    left_depth = depth(tree)\n    right_depth = depth(tree)\n    return max(left_depth, right_depth) + 1\n\n# Example binary tree node\ntree = {'value': 1, 'left': {'value': 2, 'left': None, 'right': None}, 'right': {'value': 3, 'left': None, 'right': None}}\nprint(depth(tree))",
            "fixed": "def depth(tree):\n    if tree is None:\n        return 0\n    left_depth = depth(tree.get('left'))\n    right_depth = depth(tree.get('right'))\n    return max(left_depth, right_depth) + 1\n\n# Example binary tree node\ntree = {'value': 1, 'left': {'value': 2, 'left': None, 'right': None}, 'right': {'value': 3, 'left': None, 'right': None}}\nprint(depth(tree))"
        }
    },
    {
        "Exception": "RecursionError",
        "Pair_209": {
            "buggy": "def sum_array(arr):\n    if len(arr) == 0:\n        return 0\n    return arr[0] + sum_array(arr)\n\nprint(sum_array([1, 2, 3, 4]))",
            "fixed": "def sum_array(arr):\n    if len(arr) == 0:\n        return 0\n    return arr[0] + sum_array(arr[1:])\n\nprint(sum_array([1, 2, 3, 4]))"
        }
    },
    {
        "Exception": "RecursionError",
        "Pair_210": {
            "buggy": "def nested_sum(lst):\n    if len(lst) == 0:\n        return 0\n    if isinstance(lst[0], list):\n        return nested_sum(lst) + nested_sum(lst[1:])\n    return lst[0] + nested_sum(lst)\n\nprint(nested_sum([1, [2, [3]], 4]))",
            "fixed": "def nested_sum(lst):\n    if len(lst) == 0:\n        return 0\n    if isinstance(lst[0], list):\n        return nested_sum(lst[0]) + nested_sum(lst[1:])\n    return lst[0] + nested_sum(lst[1:])\n\nprint(nested_sum([1, [2, [3]], 4]))"
        }
    },
    {
        "Exception": "RecursionError",
        "Pair_211": {
            "buggy": "def print_nested_list(lst):\n    if not lst:\n        return\n    if isinstance(lst[0], list):\n        print_nested_list(lst)\n    else:\n        print(lst[0])\n    print_nested_list(lst[1:])\n\nprint_nested_list([1, [2, 3], 4])",
            "fixed": "def print_nested_list(lst):\n    if not lst:\n        return\n    if isinstance(lst[0], list):\n        print_nested_list(lst[0])\n    else:\n        print(lst[0])\n    print_nested_list(lst[1:])\n\nprint_nested_list([1, [2, 3], 4])"
        }
    },
    {
        "Exception": "RecursionError",
        "Pair_212": {
            "buggy": "def all_permutations(s):\n    if len(s) == 0:\n        return ['']\n    prev_list = all_permutations(s)\n    next_list = []\n    for i in range(len(prev_list)):\n        for j in range(len(s)):\n            new_str = prev_list[i][0:j] + s[0] + prev_list[i][j:]\n            if new_str not in next_list:\n                next_list.append(new_str)\n    return next_list\n\nprint(all_permutations('ab'))",
            "fixed": "def all_permutations(s):\n    if len(s) == 0:\n        return ['']\n    prev_list = all_permutations(s[1:])\n    next_list = []\n    for i in range(len(prev_list)):\n        for j in range(len(s)):\n            new_str = prev_list[i][0:j] + s[0] + prev_list[i][j:]\n            if new_str not in next_list:\n                next_list.append(new_str)\n    return next_list\n\nprint(all_permutations('ab'))"
        }
    },
    {
        "Exception": "RecursionError",
        "Pair_213": {
            "buggy": "def flatten(lst):\n    if not lst:\n        return []\n    if isinstance(lst[0], list):\n        return flatten(lst)\n    return [lst[0]] + flatten(lst[1:])\n\nprint(flatten([1, [2, [3]], 4]))",
            "fixed": "def flatten(lst):\n    if not lst:\n        return []\n    if isinstance(lst[0], list):\n        return flatten(lst[0]) + flatten(lst[1:])\n    return [lst[0]] + flatten(lst[1:])\n\nprint(flatten([1, [2, [3]], 4]))"
        }
    },
    {
        "Exception": "Semantic Errors",
        "Pair_214": {
            "buggy": "def calculate_average(nums):\n    if not nums:\n        return 0\n    total = sum(nums)\n    count = len(nums) - 1\n    return total / count\n\nnumbers = [1, 2, 3, 4, 5]\nprint(calculate_average(numbers))",
            "fixed": "def calculate_average(nums):\n    if not nums:\n        return 0\n    total = sum(nums)\n    count = len(nums)\n    return total / count\n\nnumbers = [1, 2, 3, 4, 5]\nprint(calculate_average(numbers))"
        }
    },
    {
        "Exception": "Semantic Errors",
        "Pair_215": {
            "buggy": "def find_max(nums):\n    max_num = nums[0]\n    for num in nums:\n        if num < max_num:\n            max_num = num\n    return max_num\n\nnumbers = [1, 2, 3, 4, 5]\nprint(find_max(numbers))",
            "fixed": "def find_max(nums):\n    max_num = nums[0]\n    for num in nums:\n        if num > max_num:\n            max_num = num\n    return max_num\n\nnumbers = [1, 2, 3, 4, 5]\nprint(find_max(numbers))"
        }
    },
    {
        "Exception": "Semantic Errors",
        "Pair_216": {
            "buggy": "def concatenate_strings(strings):\n    result = \"\"\n    for string in strings:\n        result += string + \",\"\n    return result\n\nwords = [\"apple\", \"banana\", \"cherry\"]\nprint(concatenate_strings(words))",
            "fixed": "def concatenate_strings(strings):\n    result = \"\"\n    for string in strings:\n        result += string + \",\"\n    return result[:-1]  # Remove the trailing comma\n\nwords = [\"apple\", \"banana\", \"cherry\"]\nprint(concatenate_strings(words))"
        }
    },
    {
        "Exception": "Semantic Errors",
        "Pair_217": {
            "buggy": "def is_leap_year(year):\n    if year % 4 == 0:\n        if year % 100 == 0 and year % 400 != 0:\n            return False\n        else:\n            return True\n    return False\n\nprint(is_leap_year(1900))  # Should be False - Not a leap year\nprint(is_leap_year(2000))  # Should be True - Leap year",
            "fixed": "def is_leap_year(year):\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    return False\n\nprint(is_leap_year(1900))  # Should be False - Not a leap year\nprint(is_leap_year(2000))  # Should be True - Leap year"
        }
    },
    {
        "Exception": "Semantic Errors",
        "Pair_218": {
            "buggy": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    return n * factorial(n - 1)\n\nprint(factorial(5)) # Should print 120",
            "fixed": "def factorial(n):\n    if n < 0:\n        return 'Undefined for negative numbers'\n    if n == 0 or n == 1:\n        return 1\n    return n * factorial(n - 1)\n\nprint(factorial(5)) # Should print 120"
        }
    },
    {
        "Exception": "Semantic Errors",
        "Pair_219": {
            "buggy": "def convert_to_celsius(fahrenheit):\n    return fahrenheit + 32 * 5.0/9.0\n\nprint(convert_to_celsius(100))  # Should be about 37.78",
            "fixed": "def convert_to_celsius(fahrenheit):\n    return (fahrenheit - 32) * 5.0/9.0\n\nprint(convert_to_celsius(100))  # Should be about 37.78"
        }
    },
    {
        "Exception": "Semantic Errors",
        "Pair_220": {
            "buggy": "def fibonacci(n):\n    if n <= 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n\nprint(fibonacci(5))  # Should be 5",
            "fixed": "def fibonacci(n):\n    if n < 0:\n        return 'Undefined for negative numbers'\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n\nprint(fibonacci(5))  # Should be 5"
        }
    },
    {
        "Exception": "Semantic Errors",
        "Pair_221": {
            "buggy": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5)):\n        if num % i == 0:\n            return False\n    return True\n\nprint(is_prime(9))  # Should be False",
            "fixed": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nprint(is_prime(9))  # Should be False"
        }
    },
    {
        "Exception": "Semantic Errors",
        "Pair_222": {
            "buggy": "def count_vowels(s):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count = 1\n    return count\n\nprint(count_vowels('hello world'))  # Should be 3",
            "fixed": "def count_vowels(s):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n\nprint(count_vowels('hello world'))  # Should be 3"
        }
    },
    {
        "Exception": "Semantic Errors",
        "Pair_223": {
            "buggy": "def find_element_index(arr, element):\n    for i in range(len(arr)):\n        if arr[i] = element:\n            return i\n    return -1\n\nprint(find_element_index([1, 2, 3, 4], 3))  # Should be 2",
            "fixed": "def find_element_index(arr, element):\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return i\n    return -1\n\nprint(find_element_index([1, 2, 3, 4], 3))  # Should be 2"
        }
    },
    {
        "Exception": "Semantic Errors",
        "Pair_224": {
            "buggy": "def multiply_matrix(mat1, mat2):\n    result = [[0] * len(mat2[0]) for _ in range(len(mat1))]\n    for i in range(len(mat1)):\n        for j in range(len(mat2[0])):\n            for k in range(len(mat1[0])):\n                result[i][j] += mat1[i][k] * mat2[k][j]\n    return result\n\nmatrix1 = [[1, 2], [3, 4]]\nmatrix2 = [[2, 0], [1, 2]]\nprint(multiply_matrix(matrix1, matrix2))",
            "fixed": "def multiply_matrix(mat1, mat2):\n    result = [[0] * len(mat2[0]) for _ in range(len(mat1))]\n    for i in range(len(mat1)):\n        for j in range(len(mat2[0])):\n            for k in range(len(mat2)):\n                result[i][j] += mat1[i][k] * mat2[k][j]\n    return result\n\nmatrix1 = [[1, 2], [3, 4]]\nmatrix2 = [[2, 0], [1, 2]]\nprint(multiply_matrix(matrix1, matrix2))"
        }
    },
    {
        "Exception": "Semantic Errors",
        "Pair_225": {
            "buggy": "def find_smallest(arr):\n    smallest = arr[0]\n    for num in arr[1:]:\n        if num > smallest:\n            smallest = num\n    return smallest\n\nnumbers = [5, 3, 8, 2, 9]\nprint(find_smallest(numbers))",
            "fixed": "def find_smallest(arr):\n    smallest = arr[0]\n    for num in arr[1:]:\n        if num < smallest:\n            smallest = num\n    return smallest\n\nnumbers = [5, 3, 8, 2, 9]\nprint(find_smallest(numbers))"
        }
    },
    {
        "Exception": "Semantic Errors",
        "Pair_226": {
            "buggy": "def cumulative_sum(lst):\n    result = [0] * len(lst)\n    total = 0\n    for i in range(len(lst)):\n        total += lst[i]\n        result[i] = total\n    return result\n\nprint(cumulative_sum([1, 2, 3, 4]))  # Should be [1, 3, 6, 10]",
            "fixed": "def cumulative_sum(lst):\n    result = [0] * len(lst)\n    total = 0\n    for i in range(len(lst)):\n        total += lst[i]\n        result[i] = total\n    return result\n\nlst = [1, 2, 3, 4]\ncumulative_sum(lst)  # Should return [1, 3, 6, 10]"
        }
    },
    {
        "Exception": "Semantic Errors",
        "Pair_227": {
            "buggy": "def convert_list_to_string(lst):\n    return map(str, lst).join(', ')\n\nelements = [1, 2, 3, 4]\nprint(convert_list_to_string(elements))",
            "fixed": "def convert_list_to_string(lst):\n    return ', '.join(map(str, lst))\n\nelements = [1, 2, 3, 4]\nprint(convert_list_to_string(elements))"
        }
    },
    {
        "Exception": "Semantic Errors",
        "Pair_228": {
            "buggy": "def check_even_numbers(lst):\n    for num in lst:\n        if num % 2 == 0:\n            return False\n    return True\n\nprint(check_even_numbers([1, 3, 5]))  # Should return True",
            "fixed": "def check_even_numbers(lst):\n    for num in lst:\n        if num % 2 == 0:\n            return True\n    return False\n\nprint(check_even_numbers([1, 3, 5]))  # Should return False"
        }
    },
    {
        "Exception": "Semantic Errors",
        "Pair_229": {
            "buggy": "def determine_grade(score):\n    if score >= 90:\n        grade = 'A'\n    elif score >= 80:\n        grade = 'B'\n    elif score >= 70:\n        grade = 'C'\n    elif score >= 60:\n        grade = 'D'\n    else:\n        grade = 'F'\n    return grade\n\nprint(determine_grade(85))  # Should print B\nprint(determine_grade(95))  # Should print A",
            "fixed": "def determine_grade(score):\n    if score >= 90:\n        grade = 'A'\n    elif score >= 80:\n        grade = 'B'\n    elif score >= 70 and score < 80:\n        grade = 'C'\n    elif score >= 60 and score < 70:\n        grade = 'D'\n    else:\n        grade = 'F'\n    return grade\n\nprint(determine_grade(85))  # Should print B\nprint(determine_grade(95))  # Should print A"
        }
    },
    {
        "Exception": "Semantic Errors",
        "Pair_230": {
            "buggy": "def count_words(s):\n    words = s.split(' ')\n    count = 0\n    for word in words:\n        count -= 1\n    return count\n\nprint(count_words('hello world'))  # Should return 2",
            "fixed": "def count_words(s):\n    words = s.split(' ')\n    count = 0\n    for word in words:\n        count += 1\n    return count\n\nprint(count_words('hello world'))  # Should return 2"
        }
    },
    {
        "Exception": "Semantic Errors",
        "Pair_231": {
            "buggy": "def print_squares():\n    for i in range(1, 5):\n        print(i * i)\n\nprint_squares()",
            "fixed": "def print_squares():\n    for i in range(1, 6):\n        print(i * i)\n\nprint_squares()"
        }
    },
    {
        "Exception": "Semantic Errors",
        "Pair_232": {
            "buggy": "def merge_sorted_lists(a, b):\n    result = []\n    while a and b:\n        if a[0] <= b[0]:\n            result.append(b.pop(0))\n        else:\n            result.append(a.pop(0))\n    return result + a + b\n\nlist1 = [1, 3, 5]\nlist2 = [2, 4, 6]\nprint(merge_sorted_lists(list1, list2))  # Should return [1, 2, 3, 4, 5, 6]",
            "fixed": "def merge_sorted_lists(a, b):\n    result = []\n    while a and b:\n        if a[0] <= b[0]:\n            result.append(a.pop(0))\n        else:\n            result.append(b.pop(0))\n    return result + a + b\n\nlist1 = [1, 3, 5]\nlist2 = [2, 4, 6]\nprint(merge_sorted_lists(list1, list2))  # Should return [1, 2, 3, 4, 5, 6]"
        }
    },
    {
        "Exception": "Semantic Errors",
        "Pair_233": {
            "buggy": "def get_positive_numbers(nums):\n    positive_nums = []\n    for num in nums:\n        if num < 0:\n            positive_nums.append(num)\n    return positive_nums\n\nprint(get_positive_numbers([-1, 2, -3, 4]))  # Should return [2, 4]",
            "fixed": "def get_positive_numbers(nums):\n    positive_nums = []\n    for num in nums:\n        if num > 0:\n            positive_nums.append(num)\n    return positive_nums\n\nprint(get_positive_numbers([-1, 2, -3, 4]))  # Should return [2, 4]"
        }
    },
    {
        "Exception": "Semantic Errors",
        "Pair_234": {
            "buggy": "def find_second_largest(nums):\n    first = second = float('-inf')\n    for num in nums:\n        if num > first:\n            second = first\n            first = num\n        elif num > first and num != first:\n            second = num\n    return second\n\nprint(find_second_largest([4, 2, 5, 1, 3]))  # Should return 4",
            "fixed": "def find_second_largest(nums):\n    first = second = float('-inf')\n    for num in nums:\n        if num > first:\n            second = first\n            first = num\n        elif num > second and num != first:\n            second = num\n    return second\n\nprint(find_second_largest([4, 2, 5, 1, 3]))  # Should return 4"
        }
    },
    {
        "Exception": "Semantic Errors",
        "Pair_235": {
            "buggy": "def reverse_list(lst):\n    reversed_lst = []\n    for item in reversed(lst):\n        reversed_lst.append(item)\n    return lst\n\nprint(reverse_list([1, 2, 3, 4]))  # Should return [4, 3, 2, 1]",
            "fixed": "def reverse_list(lst):\n    reversed_lst = []\n    for item in reversed(lst):\n        reversed_lst.append(item)\n    return reversed_lst\n\nprint(reverse_list([1, 2, 3, 4]))  # Should return [4, 3, 2, 1]"
        }
    },
    {
        "Exception": "Semantic Errors",
        "Pair_236": {
            "buggy": "def check_positive(nums):\n    for num in nums:\n        if num < 0:\n            return False\n        return True\n\nprint(check_positive([1, 2, 3, -4]))  # Should return False",
            "fixed": "def check_positive(nums):\n    for num in nums:\n        if num < 0:\n            return False\n    return True\n\nprint(check_positive([1, 2, 3, -4]))  # Should return False"
        }
    },
    {
        "Exception": "Semantic Errors",
        "Pair_237": {
            "buggy": "def count_occurrences(lst, target):\n    count = 0\n    for item in lst:\n        if item == target:\n            count =+ 1\n    return count\n\nprint(count_occurrences([1, 2, 2, 3, 2], 2))  # Should return 3",
            "fixed": "def count_occurrences(lst, target):\n    count = 0\n    for item in lst:\n        if item == target:\n            count += 1\n    return count\n\nprint(count_occurrences([1, 2, 2, 3, 2], 2))  # Should return 3"
        }
    },
    {
        "Exception": "Semantic Errors",
        "Pair_238": {
            "buggy": "def sum_of_evens(lst):\n    total = 0\n    for num in lst:\n        if num % 2 == 0:\n            total += num\n        return total\n\nprint(sum_of_evens([1, 2, 3, 4]))  # Should return 6",
            "fixed": "def sum_of_evens(lst):\n    total = 0\n    for num in lst:\n        if num % 2 == 0:\n            total += num\n    return total\n\nprint(sum_of_evens([1, 2, 3, 4]))  # Should return 6"
        }
    },
    {
        "Exception": "Semantic Errors",
        "Pair_239": {
            "buggy": "def is_palindrome(s):\n    reversed_s = ''.join(reversed(s))\n    return reversed_s == s\n\nprint(is_palindrome('racecar'))  # Should return True\nprint(is_palindrome('hello'))  # Should return False",
            "fixed": "def is_palindrome(s):\n    reversed_s = ''.join(reversed(s))\n    return s == reversed_s\n\nprint(is_palindrome('racecar'))  # Should return True\nprint(is_palindrome('hello'))  # Should return False"
        }
    },
    {
        "Exception": "Semantic Errors",
        "Pair_240": {
            "buggy": "def filter_odd_numbers(lst):\n    return [num for num in lst if num % 2 == 0]\n\nprint(filter_odd_numbers([1, 2, 3, 4, 5]))  # Should return [1, 3, 5]",
            "fixed": "def filter_odd_numbers(lst):\n    return [num for num in lst if num % 2 != 0]\n\nprint(filter_odd_numbers([1, 2, 3, 4, 5]))  # Should return [1, 3, 5]"
        }
    },
    {
        "Exception": "Semantic Errors",
        "Pair_241": {
            "buggy": "def get_unique_elements(lst):\n    return list(set([item for item in lst if lst.count(item) > 1]))\n\nprint(get_unique_elements([1, 2, 2, 3, 4, 4, 5]))  # Should return [1, 3, 5]",
            "fixed": "def get_unique_elements(lst):\n    return list(set([item for item in lst if lst.count(item) == 1]))\n\nprint(get_unique_elements([1, 2, 2, 3, 4, 4, 5]))  # Should return [1, 3, 5]"
        }
    },
    {
        "Exception": "Semantic Errors",
        "Pair_242": {
            "buggy": "def remove_vowels(s):\n    vowels = 'aeiouAEIOU'\n    for vowel in vowels:\n        s.replace(vowel, '')\n    return s\n\nprint(remove_vowels('hello world'))  # Should return 'hll wrld'",
            "fixed": "def remove_vowels(s):\n    vowels = 'aeiouAEIOU'\n    for vowel in vowels:\n        s = s.replace(vowel, '')\n    return s\n\nprint(remove_vowels('hello world'))  # Should return 'hll wrld'"
        }
    },
    {
        "Exception": "Semantic Errors",
        "Pair_243": {
            "buggy": "def concat_lists(lst1, lst2):\n    return lst1.append(lst2)\n\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\nprint(concat_lists(list1, list2))  # Should return [1, 2, 3, 4, 5, 6]",
            "fixed": "def concat_lists(lst1, lst2):\n    return lst1 + lst2\n\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\nprint(concat_lists(list1, list2))  # Should return [1, 2, 3, 4, 5, 6]"
        }
    },
    {
        "Exception": "Infinite Loops",
        "Pair_244": {
            "buggy": "def decrement_counter(n):\n    while n >= 0:\n        print(n)\n        n += 1\n\nprint(decrement_counter(5))",
            "fixed": "def decrement_counter(n):\n    while n >= 0:\n        print(n)\n        n -= 1\n\nprint(decrement_counter(5))"
        }
    },
    {
        "Exception": "Infinite Loops",
        "Pair_245": {
            "buggy": "def find_negative_one(lst):\n    i = 0\n    while i < len(lst):\n        if lst[i] == -1:\n            return i\n        i -= 1\n\nprint(find_negative_one([5, 3, 2, 1, 0, -1]))",
            "fixed": "def find_negative_one(lst):\n    i = 0\n    while i < len(lst):\n        if lst[i] == -1:\n            return i\n        i += 1\n\nprint(find_negative_one([5, 3, 2, 1, 0, -1]))"
        }
    },
    {
        "Exception": "Infinite Loops",
        "Pair_246": {
            "buggy": "def halve_until_zero(n):\n    while n > 0:\n        print(n)\n        n *= 0.5\n\nhalve_until_zero(10)",
            "fixed": "def halve_until_zero(n):\n    while n > 0:\n        print(n)\n        n /= 2\n\nhalve_until_zero(10)"
        }
    },
    {
        "Exception": "Infinite Loops",
        "Pair_247": {
            "buggy": "def increment_to_limit(start, limit):\n    while start <= limit:\n        print(start)\n        start -= 1\n\nincrement_to_limit(1, 5)",
            "fixed": "def increment_to_limit(start, limit):\n    while start <= limit:\n        print(start)\n        start += 1\n\nincrement_to_limit(1, 5)"
        }
    },
    {
        "Exception": "Infinite Loops",
        "Pair_248": {
            "buggy": "def process_queue(queue):\n    while queue:\n        item = queue.pop(0)\n        print(item)\n        queue.append(item)\n\nprocess_queue([1, 2, 3, 4])",
            "fixed": "def process_queue(queue):\n    processed = set()\n    while queue:\n        item = queue.pop(0)\n        if item in processed:\n            break\n        print(item)\n        processed.add(item)\n\nprocess_queue([1, 2, 3, 4])"
        }
    },
    {
        "Exception": "Infinite Loops",
        "Pair_249": {
            "buggy": "def loop_indefinitely():\n    count = 0\n    while True:\n        print(count)\n        count += 1\n        if count == 10:\n            count -= 1\n\nloop_indefinitely()",
            "fixed": "def loop_indefinitely():\n    count = 0\n    while True:\n        print(count)\n        count += 1\n        if count == 10:\n            break\n\nloop_indefinitely()"
        }
    },
    {
        "Exception": "Infinite Loops",
        "Pair_250": {
            "buggy": "def sum_to_target(target):\n    total = 0\n    while total != target:\n        total += 2\n    return total\n\nprint(sum_to_target(10))",
            "fixed": "def sum_to_target(target):\n    total = 0\n    while total < target:\n        total += 2\n    return total\n\nprint(sum_to_target(10))"
        }
    },
    {
        "Exception": "Infinite Loops",
        "Pair_251": {
            "buggy": "def decrease_x(x):\n    while x != 0:\n        print(x)\n        x += 2\n\nprint(decrease_x(10))",
            "fixed": "def decrease_x(x):\n    while x != 0:\n        print(x)\n        x -= 2\n\nprint(decrease_x(10))"
        }
    },
    {
        "Exception": "Infinite Loops",
        "Pair_252": {
            "buggy": "def find_value_in_list(lst, target):\n    i = 0\n    while True:\n        if lst[i] == target:\n            return i\n        i += 1\n\nprint(find_value_in_list([1, 2, 3, 4], 3))",
            "fixed": "def find_value_in_list(lst, target):\n    i = 0\n    while i < len(lst):\n        if lst[i] == target:\n            return i\n        i += 1\n    return -1\n\nprint(find_value_in_list([1, 2, 3, 4], 3))"
        }
    },
    {
        "Exception": "Infinite Loops",
        "Pair_253": {
            "buggy": "def count_down(n):\n    while n > 0:\n        print(n)\n        n += 1\n\ncount_down(10)",
            "fixed": "def count_down(n):\n    while n > 0:\n        print(n)\n        n -= 1\n\ncount_down(10)"
        }
    },
    {
        "Exception": "Infinite Loops",
        "Pair_254": {
            "buggy": "def check_password(password):\n    while True:\n        if len(password) < 6:\n            print(\"Password too short!\")\n            password = input(\"Enter a new password: \")\n        else:\n            print(\"Password accepted!\")\n            break\n\ncheck_password(\"123\")",
            "fixed": "def check_password(password):\n    while len(password) < 6:\n        print(\"Password too short!\")\n        password = input(\"Enter a new password: \")\n    print(\"Password accepted!\")\n\ncheck_password(\"123\")"
        }
    },
    {
        "Exception": "Infinite Loops",
        "Pair_255": {
            "buggy": "def read_until_stop():\n    while True:\n        data = input(\"Enter data (‘stop’ to end): \")\n        if data == \"stop\":\n            break\n        print(f\"You entered: {data}\")\n\nread_until_stop()",
            "fixed": "def read_until_stop():\n    while True:\n        data = input(\"Enter data (‘stop’ to end): \")\n        if data.strip().lower() == \"stop\":\n            break\n        print(f\"You entered: {data}\")\n\nread_until_stop()"
        }
    },
    {
        "Exception": "Infinite Loops",
        "Pair_256": {
            "buggy": "def decrease_stock(stock):\n    while stock > 0:\n        stock += 1\n        print(f\"Stock: {stock}\")\n\ndecrease_stock(10)",
            "fixed": "def decrease_stock(stock):\n    while stock > 0:\n        stock -= 1\n        print(f\"Remaining Stock: {stock}\")\n\ndecrease_stock(10)"
        }
    },
    {
        "Exception": "Infinite Loops",
        "Pair_257": {
            "buggy": "def fill_water_tank():\n    level = 0\n    while level < 100:\n        print(f\"Filling... Current level: {level}%\")\n        level -= 10\n\nfill_water_tank()",
            "fixed": "def fill_water_tank():\n    level = 0\n    while level < 100:\n        print(f\"Filling... Current level: {level}%\")\n        level += 10\n\nfill_water_tank()"
        }
    },
    {
        "Exception": "Infinite Loops",
        "Pair_258": {
            "buggy": "def climb_stairs():\n    step = 0\n    while step < 10:\n        print(f\"Taking step {step}\")\n        step = 1\n\nclimb_stairs()",
            "fixed": "def climb_stairs():\n    step = 0\n    while step < 10:\n        print(f\"Taking step {step}\")\n        step += 1\n\nclimb_stairs()"
        }
    },
    {
        "Exception": "Infinite Loops",
        "Pair_259": {
            "buggy": "def input_numbers():\n    while True:\n        number = input(\"Enter a number or 'done' to quit: \")\n        if number == 'done':\n            break\n        print(f\"You entered: {number}\")\n\ninput_numbers()",
            "fixed": "def input_numbers():\n    while True:\n        number = input(\"Enter a number or 'done' to quit: \")\n        if number.strip().lower() == 'done':\n            break\n        print(f\"You entered: {number}\")\n\ninput_numbers()"
        }
    },
    {
        "Exception": "Infinite Loops",
        "Pair_260": {
            "buggy": "def print_even_numbers(n):\n    num = 0\n    while num < n:\n        if num % 2 == 0:\n            print(num)\n        num -= 1\n\nprint_even_numbers(10)",
            "fixed": "def print_even_numbers(n):\n    num = 0\n    while num < n:\n        if num % 2 == 0:\n            print(num)\n        num += 1\n\nprint_even_numbers(10)"
        }
    },
    {
        "Exception": "Infinite Loops",
        "Pair_261": {
            "buggy": "def deliver_packages(packages_left):\n    while packages_left != 0:\n        print(f\"Delivered one package. {packages_left} left\")\n        packages_left += 1\n\ndeliver_packages(5)",
            "fixed": "def deliver_packages(packages_left):\n    while packages_left != 0:\n        print(f\"Delivered one package. {packages_left} left\")\n        packages_left -= 1\n\ndeliver_packages(5)"
        }
    },
    {
        "Exception": "Infinite Loops",
        "Pair_262": {
            "buggy": "def divide_until_one(n):\n    while n != 1:\n        print(n)\n        n /= 2\n    print(n)\n\ndivide_until_one(32)",
            "fixed": "def divide_until_one(n):\n    while n > 1:\n        print(n)\n        n /= 2\n    print(n)\n\ndivide_until_one(32)"
        }
    },
    {
        "Exception": "Infinite Loops",
        "Pair_263": {
            "buggy": "def reach_goal(goal, current):\n    while current != goal:\n        print(f\"Current value: {current}\")\n        current /\n\nreach_goal(10, 1)",
            "fixed": "def reach_goal(goal, current):\n    while current < goal:\n        print(f\"Current value: {current}\")\n        current += 1\n\nreach_goal(10, 1)"
        }
    },
    {
        "Exception": "Infinite Loops",
        "Pair_264": {
            "buggy": "class LinkedList:\n    class Node:\n        def __init__(self, data):\n            self.data = data\n            self.next = None\n\n    def __init__(self):\n        self.head = None\n\n    def append(self, data):\n        new_node = self.Node(data)\n        if self.head is None:\n            self.head = new_node\n            return\n        last = self.head\n        while last.next:\n            last = last.next\n        last.next = new_node\n\n    def print_list(self):\n        current = self.head\n        while current:\n            print(current.data)\n            current = current  # Infinite loop\n\n# Testing the LinkedList class\nll = LinkedList()\nll.append(1)\nll.append(2)\nll.append(3)\nll.print_list()",
            "fixed": "class LinkedList:\n    class Node:\n        def __init__(self, data):\n            self.data = data\n            self.next = None\n\n    def __init__(self):\n        self.head = None\n\n    def append(self, data):\n        new_node = self.Node(data)\n        if self.head is None:\n            self.head = new_node\n            return\n        last = self.head\n        while last.next:\n            last = last.next\n        last.next = new_node\n\n    def print_list(self):\n        current = self.head\n        while current:\n            print(current.data)\n            current = current.next\n\n# Testing the LinkedList class\nll = LinkedList()\nll.append(1)\nll.append(2)\nll.append(3)\nll.print_list()"
        }
    },
    {
        "Exception": "Infinite Loops",
        "Pair_265": {
            "buggy": "class Fibonacci:\n    def __init__(self, limit):\n        self.limit = limit\n\n    def generate(self):\n        a, b = 0, 1\n        while a < self.limit:\n            print(a)\n            a, b = b, a + b\n        while True:\n            print(a)\n\n# Testing the Fibonacci class\nfib = Fibonacci(10)\nfib.generate()",
            "fixed": "class Fibonacci:\n    def __init__(self, limit):\n        self.limit = limit\n\n    def generate(self):\n        a, b = 0, 1\n        while a < self.limit:\n            print(a)\n            a, b = b, a + b\n\n# Testing the Fibonacci class\nfib = Fibonacci(10)\nfib.generate()"
        }
    },
    {
        "Exception": "Infinite Loops",
        "Pair_266": {
            "buggy": "class BinaryTree:\n    class Node:\n        def __init__(self, key):\n            self.left = None\n            self.right = None\n            self.val = key\n\n    def __init__(self):\n        self.root = None\n\n    def insert(self, key):\n        if self.root is None:\n            self.root = self.Node(key)\n        else:\n            self._insert(self.root, key)\n\n    def _insert(self, root, key):\n        if key < root.val:\n            if root.left is None:\n                root.left = self.Node(key)\n            else:\n                self._insert(root.left, key)\n        else:\n            if root.right is None:\n                root.right = self.Node(key)\n            else:\n                self._insert(root.right, key)\n        self._insert(root, key)  # Infinite recursion\n\n    def inorder_traversal(self, root):\n        if root:\n            self.inorder_traversal(root.left)\n            print(root.val)\n            self.inorder_traversal(root.right)\n\n# Testing the BinaryTree class\nbt = BinaryTree()\nbt.insert(10)\nbt.insert(5)\nbt.insert(15)\nbt.inorder_traversal(bt.root)",
            "fixed": "class BinaryTree:\n    class Node:\n        def __init__(self, key):\n            self.left = None\n            self.right = None\n            self.val = key\n\n    def __init__(self):\n        self.root = None\n\n    def insert(self, key):\n        if self.root is None:\n            self.root = self.Node(key)\n        else:\n            self._insert(self.root, key)\n\n    def _insert(self, root, key):\n        if key < root.val:\n            if root.left is None:\n                root.left = self.Node(key)\n            else:\n                self._insert(root.left, key)\n        else:\n            if root.right is None:\n                root.right = self.Node(key)\n            else:\n                self._insert(root.right, key)\n\n    def inorder_traversal(self, root):\n        if root:\n            self.inorder_traversal(root.left)\n            print(root.val)\n            self.inorder_traversal(root.right)\n\n# Testing the BinaryTree class\nbt = BinaryTree()\nbt.insert(10)\nbt.insert(5)\nbt.insert(15)\nbt.inorder_traversal(bt.root)"
        }
    },
    {
        "Exception": "Infinite Loops",
        "Pair_267": {
            "buggy": "class Shop:\n    def __init__(self, name):\n        self.name = name\n        self.inventory = {}\n\n    def add_item(self, item, quantity):\n        if item in self.inventory:\n            self.inventory[item] += quantity\n        else:\n            self.inventory[item] = quantity\n\n    def remove_item(self, item, quantity):\n        if item in self.inventory:\n            if self.inventory[item] >= quantity:\n                self.inventory[item] -= quantity\n                if self.inventory[item] == 0:\n                    print(f\"Item {item} is out of stock!\")\n            else:\n                print(f\"Not enough {item} in stock to remove {quantity}\")\n        else:\n            print(f\"Item {item} not found in shop\")\n\n    def check_inventory(self):\n        while True:\n            for item, quantity in self.inventory.items():\n                print(f\"{item}: {quantity}\")\n\nshop = Shop(\"MyShop\")\nshop.add_item(\"Apple\", 10)\nshop.add_item(\"Banana\", 15)\nshop.check_inventory()",
            "fixed": "class Shop:\n    def __init__(self, name):\n        self.name = name\n        self.inventory = {}\n\n    def add_item(self, item, quantity):\n        if item in self.inventory:\n            self.inventory[item] += quantity\n        else:\n            self.inventory[item] = quantity\n\n    def remove_item(self, item, quantity):\n        if item in self.inventory:\n            if self.inventory[item] >= quantity:\n                self.inventory[item] -= quantity\n                if self.inventory[item] == 0:\n                    print(f\"Item {item} is out of stock!\")\n            else:\n                print(f\"Not enough {item} in stock to remove {quantity}\")\n        else:\n            print(f\"Item {item} not found in shop\")\n\n    def check_inventory(self):\n        for item, quantity in self.inventory.items():\n            print(f\"{item}: {quantity}\")\n\nshop = Shop(\"MyShop\")\nshop.add_item(\"Apple\", 10)\nshop.add_item(\"Banana\", 15)\nshop.check_inventory()"
        }
    },
    {
        "Exception": "Infinite Loops",
        "Pair_268": {
            "buggy": "class Elevator:\n    def __init__(self, top_floor):\n        self.current_floor = 0\n        self.top_floor = top_floor\n\n    def move_up(self):\n        while self.current_floor <= self.top_floor:\n            print(f\"Moving up to floor {self.current_floor}\")\n            self.current_floor += 1\n\n    def move_down(self):\n        while self.current_floor > 0:\n            print(f\"Moving down to floor {self.current_floor}\")\n            self.current_floor -= 1\n        while True:\n            print(\"Elevator stuck in loop\")\n\n# Testing the Elevator class\nelevator = Elevator(5)\nelevator.move_up()\nelevator.move_down()",
            "fixed": "class Elevator:\n    def __init__(self, top_floor):\n        self.current_floor = 0\n        self.top_floor = top_floor\n\n    def move_up(self):\n        while self.current_floor <= self.top_floor:\n            print(f\"Moving up to floor {self.current_floor}\")\n            self.current_floor += 1\n\n    def move_down(self):\n        while self.current_floor > 0:\n            print(f\"Moving down to floor {self.current_floor}\")\n            self.current_floor -= 1\n\n# Testing the Elevator class\nelevator = Elevator(5)\nelevator.move_up()\nelevator.move_down()"
        }
    },
    {
        "Exception": "Infinite Loops",
        "Pair_269": {
            "buggy": "class TemperatureController:\n    def __init__(self, target_temp):\n        self.current_temp = 20\n        self.target_temp = target_temp\n\n    def heat(self):\n        while self.current_temp < self.target_temp:\n            print(f\"Heating... Current temperature: {self.current_temp}\")\n            self.current_temp -= 1\n            if self.current_temp == self.target_temp:\n                print(\"Reached target temperature\")\n                break\n\n    def cool(self):\n        while self.current_temp > self.target_temp:\n            print(f\"Cooling... Current temperature: {self.current_temp}\")\n            self.current_temp += 1\n            if self.current_temp == self.target_temp:\n                print(\"Reached target temperature\")\n                break\n\ncontroller = TemperatureController(25)\ncontroller.heat()",
            "fixed": "class TemperatureController:\n    def __init__(self, target_temp):\n        self.current_temp = 20\n        self.target_temp = target_temp\n\n    def heat(self):\n        while self.current_temp < self.target_temp:\n            print(f\"Heating... Current temperature: {self.current_temp}\")\n            self.current_temp += 1\n            if self.current_temp == self.target_temp:\n                print(\"Reached target temperature\")\n                break\n\n    def cool(self):\n        while self.current_temp > self.target_temp:\n            print(f\"Cooling... Current temperature: {self.current_temp}\")\n            self.current_temp -= 1\n            if self.current_temp == self.target_temp:\n                print(\"Reached target temperature\")\n                break\n\ncontroller = TemperatureController(25)\ncontroller.heat()"
        }
    },
    {
        "Exception": "Infinite Loops",
        "Pair_270": {
            "buggy": "class RailNetwork:\n    def __init__(self):\n        self.stations = {}\n\n    def add_station(self, station):\n        self.stations[station] = []\n\n    def add_route(self, frm, to, distance):\n        if frm in self.stations and to in self.stations:\n            self.stations[frm].append((to, distance))\n            self.stations[to].append((frm, distance))\n        else:\n            raise ValueError(\"One or both stations not found\")\n\n    def display_routes(self):\n        for station, routes in self.stations.items():\n            print(f\"Routes from {station}:\")\n            for route in routes:\n                print(f\"to {route[0]} - {route[1]} km\")\n\n    def infinite_route_loop(self):\n        current_station = list(self.stations.keys())[0]\n        while True:\n            for to, distance in self.stations[current_station]:\n                print(f\"Traveling from {current_station} to {to} - {distance} km\")\n\nnetwork = RailNetwork()\nnetwork.add_station(\"A\")\nnetwork.add_station(\"B\")\nnetwork.add_station(\"C\")\nnetwork.add_route(\"A\", \"B\", 100)\nnetwork.add_route(\"B\", \"C\", 150)\nnetwork.display_routes()\nnetwork.infinite_route_loop()",
            "fixed": "class RailNetwork:\n    def __init__(self):\n        self.stations = {}\n\n    def add_station(self, station):\n        self.stations[station] = []\n\n    def add_route(self, frm, to, distance):\n        if frm in self.stations and to in self.stations:\n            self.stations[frm].append((to, distance))\n            self.stations[to].append((frm, distance))\n        else:\n            raise ValueError(\"One or both stations not found\")\n\n    def display_routes(self):\n        for station, routes in self.stations.items():\n            print(f\"Routes from {station}:\")\n            for route in routes:\n                print(f\"to {route[0]} - {route[1]} km\")\n\n    def infinite_route_loop(self):\n        visited = set()\n        current_station = list(self.stations.keys())[0]\n        while current_station not in visited:\n            visited.add(current_station)\n            if not self.stations[current_station]:\n                break\n            next_station, distance = self.stations[current_station][0]\n            print(f\"Traveling from {current_station} to {next_station} - {distance} km\")\n            current_station = next_station\n\nnetwork = RailNetwork()\nnetwork.add_station(\"A\")\nnetwork.add_station(\"B\")\nnetwork.add_station(\"C\")\nnetwork.add_route(\"A\", \"B\", 100)\nnetwork.add_route(\"B\", \"C\", 150)\nnetwork.display_routes()\nnetwork.infinite_route_loop()"
        }
    },
    {
        "Exception": "Infinite Loops",
        "Pair_271": {
            "buggy": "class ChatRoom:\n    def __init__(self):\n        self.users = {}\n\n    def join(self, username):\n        if username not in self.users:\n            self.users[username] = []\n            print(f'{username} joined the chatroom')\n        else:\n            print(f'{username} already in the chatroom')\n\n    def send_message(self, from_user, to_user, message):\n        if from_user in self.users and to_user in self.users:\n            self.users[to_user].append((from_user, message))\n        else:\n            print('One or both users not found')\n\n    def display_messages(self, username):\n        if username in self.users:\n            while len(self.users[username]) > 0:\n                from_user, message = self.users[username].pop(0)\n                print(f'{from_user} to {username}: {message}')\n            while True:\n                print('Infinite loop')\n        else:\n            print(f'{username} not found in chatroom')\n\nchatroom = ChatRoom()\nchatroom.join('Alice')\nchatroom.join('Bob')\nchatroom.send_message('Alice', 'Bob', 'Hello Bob!')\nchatroom.display_messages('Bob')",
            "fixed": "class ChatRoom:\n    def __init__(self):\n        self.users = {}\n\n    def join(self, username):\n        if username not in self.users:\n            self.users[username] = []\n            print(f'{username} joined the chatroom')\n        else:\n            print(f'{username} already in the chatroom')\n\n    def send_message(self, from_user, to_user, message):\n        if from_user in self.users and to_user in self.users:\n            self.users[to_user].append((from_user, message))\n        else:\n            print('One or both users not found')\n\n    def display_messages(self, username):\n        if username in self.users:\n            while len(self.users[username]) > 0:\n                from_user, message = self.users[username].pop(0)\n                print(f'{from_user} to {username}: {message}')\n        else:\n            print(f'{username} not found in chatroom')\n\nchatroom = ChatRoom()\nchatroom.join('Alice')\nchatroom.join('Bob')\nchatroom.send_message('Alice', 'Bob', 'Hello Bob!')\nchatroom.display_messages('Bob')"
        }
    },
    {
        "Exception": "Infinite Loops",
        "Pair_272": {
            "buggy": "class TrafficLight:\n    def __init__(self):\n        self.state = 'red'\n\n    def change_state(self):\n        if self.state == 'red':\n            self.state = 'green'\n        elif self.state == 'green':\n            self.state = 'yellow'\n        elif self.state == 'yellow':\n            self.state = 'red'\n\n    def display_state(self):\n        return f'The traffic light is {self.state}'\n\n    def run(self):\n        while True:\n            self.change_state()\n            print(self.display_state())\n            if self.state == 'red':\n                print('Stopping...')\n                while True:\n                    print('Never ending')\n\ntraffic_light = TrafficLight()\ntraffic_light.run()",
            "fixed": "class TrafficLight:\n    def __init__(self):\n        self.state = 'red'\n\n    def change_state(self):\n        if self.state == 'red':\n            self.state = 'green'\n        elif self.state == 'green':\n            self.state = 'yellow'\n        elif self.state == 'yellow':\n            self.state = 'red'\n\n    def display_state(self):\n        return f'The traffic light is {self.state}'\n\n    def run(self):\n        while True:\n            self.change_state()\n            print(self.display_state())\n            if self.state == 'red':\n                print('Stopping...')\n                break\n\ntraffic_light = TrafficLight()\ntraffic_light.run()"
        }
    },
    {
        "Exception": "Infinite Loops",
        "Pair_273": {
            "buggy": "class TemperatureMonitor:\n    def __init__(self):\n        self.temperatures = []\n\n    def record_temperature(self, temp):\n        self.temperatures.append(temp)\n\n    def display_temperatures(self):\n        for temp in self.temperatures:\n            print(f'Recorded temperature: {temp}')\n        while True:\n            print('Never ending')\n\nmonitor = TemperatureMonitor()\nmonitor.record_temperature(25)\nmonitor.record_temperature(30)\nmonitor.display_temperatures()",
            "fixed": "class TemperatureMonitor:\n    def __init__(self):\n        self.temperatures = []\n\n    def record_temperature(self, temp):\n        self.temperatures.append(temp)\n\n    def display_temperatures(self):\n        for temp in self.temperatures:\n            print(f'Recorded temperature: {temp}')\n\nmonitor = TemperatureMonitor()\nmonitor.record_temperature(25)\nmonitor.record_temperature(30)\nmonitor.display_temperatures()"
        }
    },
    {
        "Exception": "Infinite Loops",
        "Pair_274": {
            "buggy": "class Airport:\n    def __init__(self):\n        self.planes = []\n\n    def land_plane(self, plane):\n        self.planes.append(plane)\n\n    def takeoff_plane(self, plane):\n        if plane in self.planes:\n            self.planes.remove(plane)\n\n    def display_planes(self):\n        while True:\n            for plane in self.planes:\n                print(f'Plane {plane} is at the airport')\n\nairport = Airport()\nairport.land_plane('Flight 101')\nairport.land_plane('Flight 202')\nairport.display_planes()",
            "fixed": "class Airport:\n    def __init__(self):\n        self.planes = []\n\n    def land_plane(self, plane):\n        self.planes.append(plane)\n\n    def takeoff_plane(self, plane):\n        if plane in self.planes:\n            self.planes.remove(plane)\n\n    def display_planes(self):\n        for plane in self.planes:\n            print(f'Plane {plane} is at the airport')\n\nairport = Airport()\nairport.land_plane('Flight 101')\nairport.land_plane('Flight 202')\nairport.display_planes()"
        }
    },
    {
        "Exception": "Infinite Loops",
        "Pair_275": {
            "buggy": "class ParkingLot:\n    def __init__(self):\n        self.cars = []\n\n    def park_car(self, car):\n        self.cars.append(car)\n\n    def remove_car(self, car):\n        if car in self.cars:\n            self.cars.remove(car)\n\n    def display_cars(self):\n        for car in self.cars:\n            print(f'Car {car} is parked in the lot')\n        while True:\n            print('Never ending')\n\nlot = ParkingLot()\nlot.park_car('Car A')\nlot.park_car('Car B')\nlot.display_cars()",
            "fixed": "class ParkingLot:\n    def __init__(self):\n        self.cars = []\n\n    def park_car(self, car):\n        self.cars.append(car)\n\n    def remove_car(self, car):\n        if car in self.cars:\n            self.cars.remove(car)\n\n    def display_cars(self):\n        for car in self.cars:\n            print(f'Car {car} is parked in the lot')\n\nlot = ParkingLot()\nlot.park_car('Car A')\nlot.park_car('Car B')\nlot.display_cars()"
        }
    },
    {
        "Exception": "Infinite Loops",
        "Pair_276": {
            "buggy": "class Library:\n    def __init__(self):\n        self.books = {}\n\n    def add_book(self, title, author):\n        self.books[title] = author\n\n    def remove_book(self, title):\n        if title in self.books:\n            del self.books[title]\n\n    def display_books(self):\n        for title, author in self.books.items():\n            print(f'{title} by {author}')\n        while True:\n            print('Never ending')\n\nlibrary = Library()\nlibrary.add_book('Book A', 'Author A')\nlibrary.add_book('Book B', 'Author B')\nlibrary.display_books()",
            "fixed": "class Library:\n    def __init__(self):\n        self.books = {}\n\n    def add_book(self, title, author):\n        self.books[title] = author\n\n    def remove_book(self, title):\n        if title in self.books:\n            del self.books[title]\n\n    def display_books(self):\n        for title, author in self.books.items():\n            print(f'{title} by {author}')\n\nlibrary = Library()\nlibrary.add_book('Book A', 'Author A')\nlibrary.add_book('Book B', 'Author B')\nlibrary.display_books()"
        }
    },
    {
        "Exception": "Infinite Loops",
        "Pair_277": {
            "buggy": "class MusicPlayer:\n    def __init__(self):\n        self.playlist = []\n\n    def add_song(self, song):\n        self.playlist.append(song)\n\n    def remove_song(self, song):\n        if song in self.playlist:\n            self.playlist.remove(song)\n\n    def play_music(self):\n        while True:\n            for song in self.playlist:\n                print(f'Playing {song}')\n\nplayer = MusicPlayer()\nplayer.add_song('Song A')\nplayer.add_song('Song B')\nplayer.play_music()",
            "fixed": "class MusicPlayer:\n    def __init__(self):\n        self.playlist = []\n\n    def add_song(self, song):\n        self.playlist.append(song)\n\n    def remove_song(self, song):\n        if song in self.playlist:\n            self.playlist.remove(song)\n\n    def play_music(self):\n        for song in self.playlist:\n            print(f'Playing {song}')\n\nplayer = MusicPlayer()\nplayer.add_song('Song A')\nplayer.add_song('Song B')\nplayer.play_music()"
        }
    },
    {
        "Exception": "Infinite Loops",
        "Pair_278": {
            "buggy": "class SmartHome:\n    def __init__(self):\n        self.devices = []\n\n    def add_device(self, device):\n        self.devices.append(device)\n\n    def remove_device(self, device):\n        if device in self.devices:\n            self.devices.remove(device)\n\n    def check_devices(self):\n        while True:\n            for device in self.devices:\n                print(f'{device} is online')\n\nhome = SmartHome()\nhome.add_device('Thermostat')\nhome.add_device('Security Camera')\nhome.check_devices()",
            "fixed": "class SmartHome:\n    def __init__(self):\n        self.devices = []\n\n    def add_device(self, device):\n        self.devices.append(device)\n\n    def remove_device(self, device):\n        if device in self.devices:\n            self.devices.remove(device)\n\n    def check_devices(self):\n        for device in self.devices:\n            print(f'{device} is online')\n\nhome = SmartHome()\nhome.add_device('Thermostat')\nhome.add_device('Security Camera')\nhome.check_devices()"
        }
    },
    {
        "Exception": "Infinite Loops",
        "Pair_279": {
            "buggy": "class SortingMachine:\n    def __init__(self, data):\n        self.data = data\n\n    def sort_asc(self):\n        while True:\n            swapped = False\n            for i in range(len(self.data) - 1):\n                if self.data[i] > self.data[i + 1]:\n                    self.data[i], self.data[i + 1] = self.data[i + 1], self.data[i]\n                    swapped = True\n            if not swapped:\n                break\n\n    def sort_desc(self):\n        self.sort_asc()\n        self.data = self.data[::-1]\n\n    def display(self):\n        print(self.data)\n\nmachine = SortingMachine([4, 2, 5, 1, 3])\nmachine.sort_asc()\nmachine.display()\nmachine.sort_desc()\nmachine.display()",
            "fixed": "class SortingMachine:\n    def __init__(self, data):\n        self.data = data\n\n    def sort_asc(self):\n        sorted_data = False\n        while not sorted_data:\n            swapped = False\n            for i in range(len(self.data) - 1):\n                if self.data[i] > self.data[i + 1]:\n                    self.data[i], self.data[i + 1] = self.data[i + 1], self.data[i]\n                    swapped = True\n            if not swapped:\n                sorted_data = True\n\n    def sort_desc(self):\n        self.sort_asc()\n        self.data = self.data[::-1]\n\n    def display(self):\n        print(self.data)\n\nmachine = SortingMachine([4, 2, 5, 1, 3])\nmachine.sort_asc()\nmachine.display()\nmachine.sort_desc()\nmachine.display()"
        }
    },
    {
        "Exception": "Infinite Loops",
        "Pair_280": {
            "buggy": "class Auction:\n    def __init__(self):\n        self.bids = []\n\n    def place_bid(self, name, amount):\n        self.bids.append((name, amount))\n\n    def show_bids(self):\n        for bid in self.bids:\n            print(f'{bid[0]} bid ${bid[1]}')\n        while True:\n            print('Looping indefinitely')\n\nauction = Auction()\nauction.place_bid('Alice', 100)\nauction.place_bid('Bob', 150)\nauction.show_bids()",
            "fixed": "class Auction:\n    def __init__(self):\n        self.bids = []\n\n    def place_bid(self, name, amount):\n        self.bids.append((name, amount))\n\n    def show_bids(self):\n        for bid in self.bids:\n            print(f'{bid[0]} bid ${bid[1]}')\n\nauction = Auction()\nauction.place_bid('Alice', 100)\nauction.place_bid('Bob', 150)\nauction.show_bids()"
        }
    },
    {
        "Exception": "Infinite Loops",
        "Pair_281": {
            "buggy": "class WeatherStation:\n    def __init__(self):\n        self.readings = []\n\n    def record_reading(self, temperature):\n        self.readings.append(temperature)\n\n    def show_readings(self):\n        for reading in self.readings:\n            print(f'Temperature: {reading}°C')\n        while True:\n            print('Displaying readings in an infinite loop')\n\nstation = WeatherStation()\nstation.record_reading(25)\nstation.record_reading(30)\nstation.show_readings()",
            "fixed": "class WeatherStation:\n    def __init__(self):\n        self.readings = []\n\n    def record_reading(self, temperature):\n        self.readings.append(temperature)\n\n    def show_readings(self):\n        for reading in self.readings:\n            print(f'Temperature: {reading}°C')\n\nstation = WeatherStation()\nstation.record_reading(25)\nstation.record_reading(30)\nstation.show_readings()"
        }
    }
]